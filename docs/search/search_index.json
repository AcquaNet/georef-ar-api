{"config":{"lang":["es"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos de Argentina \u00b6 Versi\u00f3n : 0.3.3 La API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos, permite normalizar y codificar los nombres de unidades territoriales de la Argentina (provincias, departamentos, municipios y localidades) y de sus calles, as\u00ed como ubicar coordenadas dentro de ellas. En la Gu\u00eda para la identificaci\u00f3n y uso de entidades interoperables se explica c\u00f3mo funcionan las unidades territoriales internas de la Argentina y la relaci\u00f3n entre ellas. Normalizar \u00b6 Las unidades territoriales tienen nombres y c\u00f3digos oficiales. Cuando no se usan, los datos son dif\u00edciles de cruzar entre s\u00ed y hay que normalizarlos antes. provincia Santiago del Estero Stgo. del Estero S. del Estero Sgo. del Estero GET https://apis.datos.gob.ar/georef/api/provincias?nombre=Sgo.%20del%20Estero { \"provincias\": [ { \"nombre\": \"Santiago del Estero\", \"id\": \"86\", \"centroide\": { \"lat\": -27.782412, \"lon\": -63.252387 } } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 } Enriquecer \u00b6 Cuando un conjunto de datos tiene puntos de coordenadas dentro de Argentina, puede cruzarse con muchos datos m\u00e1s, relacionados a las unidades territoriales que lo contienen. Para esto hay que agregarlas a los datos originales. lat lon -27.2741 -66.7529 -34.603633 -58.3837587 GET https://apis.datos.gob.ar/georef/api/ubicacion?lat=-27.2741&lon=-66.7529 { \"ubicacion\": { \"departamento\": { \"id\": \"10035\", \"nombre\": \"Bel\u00e9n\" }, \"lat\": -27.2741, \"lon\": -66.7529, \"municipio\": { \"id\": \"100077\", \"nombre\": \"Hualf\u00edn\" }, \"provincia\": { \"id\": \"10\", \"nombre\": \"Catamarca\" } } } Referencia \u00b6 Finalmente, se puede utilizar la API como punto de referencia al momento de crear datos que est\u00e9n vinculados a datos geogr\u00e1ficos. Por ejemplo, si se cuenta con un formulario en el que se debe mostrar a un usuario un listado de provincias, y luego un listado de municipios a partir de la provincia seleccionada, se podr\u00edan ejecutar las siguientes consultas: Listar las provincias de la Rep\u00fablica Argentina: GET https://apis.datos.gob.ar/georef/api/provincias?campos=id,nombre { \"provincias\": [ { \"nombre\": \"Chaco\", \"id\": \"22\" }, { ... } // 23 resultados omitidos ], \"cantidad\": 24, \"total\": 24, \"inicio\": 0 } Asumiendo que el usuario selecciona Chaco (ID: 22 ), se ejecutar\u00eda la siguiente consulta para obtener el listado de municipios: GET https://apis.datos.gob.ar/georef/api/municipios?provincia=22&campos=id,nombre&max=100 { \"municipios\": [ { \"nombre\": \"Makall\u00e9\", \"id\": \"220161\" }, { ... } // 67 resultados omitidos ], \"cantidad\": 68, \"total\": 68, \"inicio\": 0 } Notar que al ser datos que no son modificados regularmente, es posible retener copias de los mismos para ser reutilizados en el futuro. Si sos usuario de la API de Normalizaci\u00f3n de Datos Geogr\u00e1ficos y quer\u00e9s estar al tanto de los cambios y novedades, inscribite en la base de contactos de Datos Argentina y eleg\u00ed sobre qu\u00e9 temas quer\u00e9s que te escribamos. \u00bfTen\u00e9s algo que contarnos? Nos encantar\u00eda que nos cuentes por Twitter o por mail qu\u00e9 mejor\u00f3 usar la API en tu trabajo y qu\u00e9 le falta para mejorar a\u00fan m\u00e1s.","title":"Inicio"},{"location":"#api-del-servicio-de-normalizacion-de-datos-geograficos-de-argentina","text":"Versi\u00f3n : 0.3.3 La API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos, permite normalizar y codificar los nombres de unidades territoriales de la Argentina (provincias, departamentos, municipios y localidades) y de sus calles, as\u00ed como ubicar coordenadas dentro de ellas. En la Gu\u00eda para la identificaci\u00f3n y uso de entidades interoperables se explica c\u00f3mo funcionan las unidades territoriales internas de la Argentina y la relaci\u00f3n entre ellas.","title":"API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos de Argentina"},{"location":"#normalizar","text":"Las unidades territoriales tienen nombres y c\u00f3digos oficiales. Cuando no se usan, los datos son dif\u00edciles de cruzar entre s\u00ed y hay que normalizarlos antes. provincia Santiago del Estero Stgo. del Estero S. del Estero Sgo. del Estero GET https://apis.datos.gob.ar/georef/api/provincias?nombre=Sgo.%20del%20Estero { \"provincias\": [ { \"nombre\": \"Santiago del Estero\", \"id\": \"86\", \"centroide\": { \"lat\": -27.782412, \"lon\": -63.252387 } } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 }","title":"Normalizar"},{"location":"#enriquecer","text":"Cuando un conjunto de datos tiene puntos de coordenadas dentro de Argentina, puede cruzarse con muchos datos m\u00e1s, relacionados a las unidades territoriales que lo contienen. Para esto hay que agregarlas a los datos originales. lat lon -27.2741 -66.7529 -34.603633 -58.3837587 GET https://apis.datos.gob.ar/georef/api/ubicacion?lat=-27.2741&lon=-66.7529 { \"ubicacion\": { \"departamento\": { \"id\": \"10035\", \"nombre\": \"Bel\u00e9n\" }, \"lat\": -27.2741, \"lon\": -66.7529, \"municipio\": { \"id\": \"100077\", \"nombre\": \"Hualf\u00edn\" }, \"provincia\": { \"id\": \"10\", \"nombre\": \"Catamarca\" } } }","title":"Enriquecer"},{"location":"#referencia","text":"Finalmente, se puede utilizar la API como punto de referencia al momento de crear datos que est\u00e9n vinculados a datos geogr\u00e1ficos. Por ejemplo, si se cuenta con un formulario en el que se debe mostrar a un usuario un listado de provincias, y luego un listado de municipios a partir de la provincia seleccionada, se podr\u00edan ejecutar las siguientes consultas: Listar las provincias de la Rep\u00fablica Argentina: GET https://apis.datos.gob.ar/georef/api/provincias?campos=id,nombre { \"provincias\": [ { \"nombre\": \"Chaco\", \"id\": \"22\" }, { ... } // 23 resultados omitidos ], \"cantidad\": 24, \"total\": 24, \"inicio\": 0 } Asumiendo que el usuario selecciona Chaco (ID: 22 ), se ejecutar\u00eda la siguiente consulta para obtener el listado de municipios: GET https://apis.datos.gob.ar/georef/api/municipios?provincia=22&campos=id,nombre&max=100 { \"municipios\": [ { \"nombre\": \"Makall\u00e9\", \"id\": \"220161\" }, { ... } // 67 resultados omitidos ], \"cantidad\": 68, \"total\": 68, \"inicio\": 0 } Notar que al ser datos que no son modificados regularmente, es posible retener copias de los mismos para ser reutilizados en el futuro. Si sos usuario de la API de Normalizaci\u00f3n de Datos Geogr\u00e1ficos y quer\u00e9s estar al tanto de los cambios y novedades, inscribite en la base de contactos de Datos Argentina y eleg\u00ed sobre qu\u00e9 temas quer\u00e9s que te escribamos. \u00bfTen\u00e9s algo que contarnos? Nos encantar\u00eda que nos cuentes por Twitter o por mail qu\u00e9 mejor\u00f3 usar la API en tu trabajo y qu\u00e9 le falta para mejorar a\u00fan m\u00e1s.","title":"Referencia"},{"location":"addresses/","text":"Normalizaci\u00f3n de Direcciones \u00b6 El recurso /direcciones de la API permite normalizar y georreferenciar direcciones de calles. Como todos los otros recursos, cuenta con varios filtros y opciones que permiten controlar los resultados obtenidos. Par\u00e1metros y filtros \u00b6 El \u00fanico par\u00e1metro obligatorio del recurso /direcciones es direccion . El mismo debe tomar el valor de una direcci\u00f3n: es decir, una combinaci\u00f3n de nombres de calles y una altura preferiblemente num\u00e9rica. La API tolera direcciones con distintas estructuras, y se hace un esfuerzo en intentar interpretar qu\u00e9 informaci\u00f3n representa cada parte del valor recibido, teniendo en cuenta errores de escritura comunes. Para lograr esto, se utiliza la librer\u00eda georef-ar-address . En algunos casos, la estructura de la direcci\u00f3n no puede ser interpretada correctamente; para evitar estos casos se recomienda utilizar direcciones con el siguiente formato aproximado: calle [altura] calle 1 [altura] esquina/y calle 2 calle 1 esquina/y calle 2 [altura] calle 1 [altura] entre calle 2 y calle 3 calle 1 entre calle 2 y calle 3 [altura] En todos los casos, el valor [altura] es opcional, y de estar presente puede ser seguido de un piso/n\u00famero de departamento. El resto de los par\u00e1metros aceptados por el recurso /direccion est\u00e1n listados en la referencia completa de la API . Se recomienda utilizar los par\u00e1metros provincia y/o departamento para obtener resultados m\u00e1s precisos. Campos de respuesta \u00b6 Al normalizar una direcci\u00f3n, la API devuelve varios campos de datos. Para entender el significado de cada uno, es conveniente utilizar un ejemplo de uso: GET https://apis.datos.gob.ar/georef/api/direcciones?direccion=Av. Santa Fe nro 260 2ndo C, entre Santa Rosa y Col\u00f3n&departamento=capital&provincia=cordoba { \"cantidad\": 1, \"direcciones\": [ { \"altura\": { \"unidad\": \"nro\", \"valor\": \"260\" }, \"calle\": { \"categoria\": \"AV\", \"id\": \"1401401002460\", \"nombre\": \"AV SANTA FE\" }, \"calle_cruce_1\": { \"categoria\": \"CALLE\", \"id\": \"1401401038100\", \"nombre\": \"SANTA ROSA\" }, \"calle_cruce_2\": { \"categoria\": \"AV\", \"id\": \"1401401002060\", \"nombre\": \"AV COLON\" }, \"departamento\": { \"id\": \"14014\", \"nombre\": \"Capital\" }, \"nomenclatura\": \"AV SANTA FE 260 (ENTRE SANTA ROSA Y AV COLON), Capital, C\u00f3rdoba\", \"piso\": null, \"provincia\": { \"id\": \"14\", \"nombre\": \"C\u00f3rdoba\" }, \"ubicacion\": { \"lat\": -31.4080674840673, \"lon\": -64.20062417513701 } } ], \"inicio\": 0, \"total\": 1 } Como se puede observar, campos de respuesta est\u00e1ndar son: altura unidad : Unidad de la altura, o prefijo del valor num\u00e9rico de la misma. valor : Valor num\u00e9rico de la altura. calle : Propiedades de la primera calle presente en la direcci\u00f3n. nombre : Nombre normalizado de la calle 1 . id : ID de la calle 1 . categoria : Tipo de la calle 1 . calle_cruce_1 : Propiedades de la segunda calle presente en la direcci\u00f3n (valores opcionales) . nombre : Nombre normalizado de la calle 2 . id : ID de la calle 2 . categoria : Tipo de la calle 2 . calle_cruce_1 : Propiedades de la tercera calle presente en la direcci\u00f3n (valores opcionales) . nombre : Nombre normalizado de la calle 3 . id : ID de la calle 3 . categoria : Tipo de la calle 3 . departamento : Departamento de la calle 1 . provincia : Provincia de la calle 1 . piso : Piso extra\u00eddo de la direcci\u00f3n. nomenclatura : Versi\u00f3n normalizada de la direcci\u00f3n. ubicacion : Resultados de la georreferenciaci\u00f3n de la direcci\u00f3n ( lon y lat ). Cuando los valores est\u00e1n presentes, representan una aproximaci\u00f3n de la ubicaci\u00f3n de la direcci\u00f3n. Cuando no est\u00e1n presentes, se debe a que los datos indexados en la API no fueron suficientes para obtener un resultado estimativo. La efectividad de la georreferenciaci\u00f3n var\u00eda de acuerdo a cada regi\u00f3n del pa\u00eds. Normalizaci\u00f3n de direcciones por lotes \u00b6 Para normalizar grandes cantidades de direcciones, se recomienda utilizar los recursos de consultas por lotes .","title":"Normalizaci\u00f3n de direcciones"},{"location":"addresses/#normalizacion-de-direcciones","text":"El recurso /direcciones de la API permite normalizar y georreferenciar direcciones de calles. Como todos los otros recursos, cuenta con varios filtros y opciones que permiten controlar los resultados obtenidos.","title":"Normalizaci\u00f3n de Direcciones"},{"location":"addresses/#parametros-y-filtros","text":"El \u00fanico par\u00e1metro obligatorio del recurso /direcciones es direccion . El mismo debe tomar el valor de una direcci\u00f3n: es decir, una combinaci\u00f3n de nombres de calles y una altura preferiblemente num\u00e9rica. La API tolera direcciones con distintas estructuras, y se hace un esfuerzo en intentar interpretar qu\u00e9 informaci\u00f3n representa cada parte del valor recibido, teniendo en cuenta errores de escritura comunes. Para lograr esto, se utiliza la librer\u00eda georef-ar-address . En algunos casos, la estructura de la direcci\u00f3n no puede ser interpretada correctamente; para evitar estos casos se recomienda utilizar direcciones con el siguiente formato aproximado: calle [altura] calle 1 [altura] esquina/y calle 2 calle 1 esquina/y calle 2 [altura] calle 1 [altura] entre calle 2 y calle 3 calle 1 entre calle 2 y calle 3 [altura] En todos los casos, el valor [altura] es opcional, y de estar presente puede ser seguido de un piso/n\u00famero de departamento. El resto de los par\u00e1metros aceptados por el recurso /direccion est\u00e1n listados en la referencia completa de la API . Se recomienda utilizar los par\u00e1metros provincia y/o departamento para obtener resultados m\u00e1s precisos.","title":"Par\u00e1metros y filtros"},{"location":"addresses/#campos-de-respuesta","text":"Al normalizar una direcci\u00f3n, la API devuelve varios campos de datos. Para entender el significado de cada uno, es conveniente utilizar un ejemplo de uso: GET https://apis.datos.gob.ar/georef/api/direcciones?direccion=Av. Santa Fe nro 260 2ndo C, entre Santa Rosa y Col\u00f3n&departamento=capital&provincia=cordoba { \"cantidad\": 1, \"direcciones\": [ { \"altura\": { \"unidad\": \"nro\", \"valor\": \"260\" }, \"calle\": { \"categoria\": \"AV\", \"id\": \"1401401002460\", \"nombre\": \"AV SANTA FE\" }, \"calle_cruce_1\": { \"categoria\": \"CALLE\", \"id\": \"1401401038100\", \"nombre\": \"SANTA ROSA\" }, \"calle_cruce_2\": { \"categoria\": \"AV\", \"id\": \"1401401002060\", \"nombre\": \"AV COLON\" }, \"departamento\": { \"id\": \"14014\", \"nombre\": \"Capital\" }, \"nomenclatura\": \"AV SANTA FE 260 (ENTRE SANTA ROSA Y AV COLON), Capital, C\u00f3rdoba\", \"piso\": null, \"provincia\": { \"id\": \"14\", \"nombre\": \"C\u00f3rdoba\" }, \"ubicacion\": { \"lat\": -31.4080674840673, \"lon\": -64.20062417513701 } } ], \"inicio\": 0, \"total\": 1 } Como se puede observar, campos de respuesta est\u00e1ndar son: altura unidad : Unidad de la altura, o prefijo del valor num\u00e9rico de la misma. valor : Valor num\u00e9rico de la altura. calle : Propiedades de la primera calle presente en la direcci\u00f3n. nombre : Nombre normalizado de la calle 1 . id : ID de la calle 1 . categoria : Tipo de la calle 1 . calle_cruce_1 : Propiedades de la segunda calle presente en la direcci\u00f3n (valores opcionales) . nombre : Nombre normalizado de la calle 2 . id : ID de la calle 2 . categoria : Tipo de la calle 2 . calle_cruce_1 : Propiedades de la tercera calle presente en la direcci\u00f3n (valores opcionales) . nombre : Nombre normalizado de la calle 3 . id : ID de la calle 3 . categoria : Tipo de la calle 3 . departamento : Departamento de la calle 1 . provincia : Provincia de la calle 1 . piso : Piso extra\u00eddo de la direcci\u00f3n. nomenclatura : Versi\u00f3n normalizada de la direcci\u00f3n. ubicacion : Resultados de la georreferenciaci\u00f3n de la direcci\u00f3n ( lon y lat ). Cuando los valores est\u00e1n presentes, representan una aproximaci\u00f3n de la ubicaci\u00f3n de la direcci\u00f3n. Cuando no est\u00e1n presentes, se debe a que los datos indexados en la API no fueron suficientes para obtener un resultado estimativo. La efectividad de la georreferenciaci\u00f3n var\u00eda de acuerdo a cada regi\u00f3n del pa\u00eds.","title":"Campos de respuesta"},{"location":"addresses/#normalizacion-de-direcciones-por-lotes","text":"Para normalizar grandes cantidades de direcciones, se recomienda utilizar los recursos de consultas por lotes .","title":"Normalizaci\u00f3n de direcciones por lotes"},{"location":"applications/","text":"Aplicaciones \u00b6 Lista de proyectos y aplicaciones que utilizan, extienden o documentan la API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos. De terceros \u00b6 pdelboca/georefar : Interface en R para usar la API por @pdelboca . juancarlospaco/nim-georefar : Inferface en Nim para usar la API por juancarlospaco (GitHub) . Contacto \u00b6 \u00bfDesarrollaste una librer\u00eda o ten\u00e9s un proyecto que usa la API? Te invitamos a contarnos as\u00ed la agregamos a esta lista. Para todo lo dem\u00e1s, pod\u00e9s mandarnos tu comentario o consulta a datos@modernizacion.gob.ar .","title":"Aplicaciones"},{"location":"applications/#aplicaciones","text":"Lista de proyectos y aplicaciones que utilizan, extienden o documentan la API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos.","title":"Aplicaciones"},{"location":"applications/#de-terceros","text":"pdelboca/georefar : Interface en R para usar la API por @pdelboca . juancarlospaco/nim-georefar : Inferface en Nim para usar la API por juancarlospaco (GitHub) .","title":"De terceros"},{"location":"applications/#contacto","text":"\u00bfDesarrollaste una librer\u00eda o ten\u00e9s un proyecto que usa la API? Te invitamos a contarnos as\u00ed la agregamos a esta lista. Para todo lo dem\u00e1s, pod\u00e9s mandarnos tu comentario o consulta a datos@modernizacion.gob.ar .","title":"Contacto"},{"location":"bulk/","text":"Consutas por lotes \u00b6 Todos los recursos de la API tienen una variante POST que permite realizar varias consultas en una misma petici\u00f3n. De esta forma, se pueden env\u00edar m\u00e1s consultas en menos tiempo. Las versiones de los recursos POST aceptan los mismos par\u00e1metros que las GET , con la excepci\u00f3n del par\u00e1metro formato , que obligatoriamente toma el valor json . Adicionalmente, todos los par\u00e1metros se env\u00edan a trav\u00e9s del cuerpo de la consulta HTTP, y no como parte del query string . Por ejemplo, las siguientes tres consultas: GET https://apis.datos.gob.ar/georef/api/provincias?nombre=cordoba&campos=nombre GET https://apis.datos.gob.ar/georef/api/provincias?nombre=chaco&campos=nombre GET https://apis.datos.gob.ar/georef/api/provincias?nombre=san luis&campos=nombre Son equivalentes a la siguiente consulta POST por lotes: POST https://apis.datos.gob.ar/georef/api/provincias { \"provincias\": [ { \"nombre\": \"cordoba\", \"campos\": \"nombre\" }, { \"nombre\": \"chaco\", \"campos\": \"nombre\" }, { \"nombre\": \"san luis\", \"campos\": \"nombre\" } ] } Que resultar\u00eda en la siguiente respuesta JSON: { \"resultados\": [ { \"cantidad\": 1, \"inicio\": 0, \"provincias\": [ { \"id\": \"14\", \"nombre\": \"C\u00f3rdoba\" } ], \"total\": 1 }, { \"cantidad\": 1, \"inicio\": 0, \"provincias\": [ { \"id\": \"22\", \"nombre\": \"Chaco\" } ], \"total\": 1 }, { \"cantidad\": 1, \"inicio\": 0, \"provincias\": [ { \"id\": \"74\", \"nombre\": \"San Luis\" } ], \"total\": 1 } ] } Como se muestra en el ejemplo, la respuesta contiene una lista resultados , con los resultados de cada consulta individual adentro. Las estructuras de las respuestas se mantienen id\u00e9nticas que los recursos GET . Cantidad m\u00e1xima de consultas La cantidad de consultas en una misma petici\u00f3n no debe superar las 1000. Adicionalmente, el total de los par\u00e1metros max sumados de todas las consultas no debe superar los 5000. Por ejemplo, se permite enviar 1000 consultas con max=5 , o 100 consultas con max=50 , pero no 1000 consultas con max=10 . Utilizando los recursos por lotes, se pueden normalizar mayores cantidades de datos en menos tiempo. Por ejemplo, si se cuenta con 50000 direcciones, tan solo se necesitan 10 consultas para normalizar el activo de datos entero. Utilizando los recursos GET , se necesitar\u00edan 50000 (una por dato). Ejemplos de uso \u00b6 A diferencia de los recursos GET , los ejemplos de operaciones por lotes se muestran utilizando comandos constru\u00eddos sobre la herramienta curl . La secci\u00f3n de ejemplos con Python tambi\u00e9n contiene ejemplos de uso de los recursos POST . B\u00fasqueda de municipios en lotes \u00b6 curl -X POST \"https://apis.datos.gob.ar/georef/api/municipios\" \\ -H 'Content-Type: application/json' -d' { \"municipios\": [ { \"nombre\": \"belgrano\", \"max\": 1, \"campos\": \"id, nombre\" }, { \"nombre\": \"martin\", \"max\": 1, \"provincia\": \"la pampa\", \"aplanar\": true } ] } ' Resultados: { \"resultados\": [ { \"municipios\": [ { \"id\": \"060301\", \"nombre\": \"General Belgrano\" } ], \"cantidad\": 1, \"total\": 8, \"inicio\": 0 }, { \"municipios\": [ { \"centroide_lat\": -35.361211, \"centroide_lon\": -64.294073, \"id\": \"420126\", \"nombre\": \"Embajador Martini\", \"provincia_id\": \"42\", \"provincia_nombre\": \"La Pampa\" } ], \"cantidad\": 1, \"total\": 2, \"inicio\": 0 } ] } Normalizaci\u00f3n de direcciones en lotes \u00b6 curl -X POST \"https://apis.datos.gob.ar/georef/api/direcciones\" \\ -H 'Content-Type: application/json' -d' { \"direcciones\": [ { \"direccion\": \"santa fe 3100\", \"max\": 1, \"campos\": \"basico\" }, { \"direccion\": \"corientes 4010\", \"max\": 1, \"campos\": \"basico\", \"departamento\": \"General L\u00f3pez\" } ] } ' Resultados: { \"resultados\": [ { \"cantidad\": 1, \"direcciones\": [ { \"altura\": { \"valor\": \"3100\" }, \"calle\": { \"id\": \"0642701011435\", \"nombre\": \"SANTA FE\" }, \"calle_cruce_1\": { \"id\": null, \"nombre\": null }, \"calle_cruce_2\": { \"id\": null, \"nombre\": null }, \"nomenclatura\": \"SANTA FE 3100, La Matanza, Buenos Aires\" } ], \"inicio\": 0, \"total\": 29 }, { \"cantidad\": 1, \"direcciones\": [ { \"altura\": { \"valor\": \"4010\" }, \"calle\": { \"id\": \"8204229000610\", \"nombre\": \"CORRIENTES\" }, \"calle_cruce_1\": { \"id\": null, \"nombre\": null }, \"calle_cruce_2\": { \"id\": null, \"nombre\": null }, \"nomenclatura\": \"CORRIENTES 4010, General L\u00f3pez, Santa Fe\" } ], \"inicio\": 0, \"total\": 1 } ] } Entidades geogr\u00e1ficas en varios puntos \u00b6 curl -X POST \"https://apis.datos.gob.ar/georef/api/ubicacion\" \\ -H 'Content-Type: application/json' -d' { \"ubicaciones\": [ { \"lat\": -27.274161, \"lon\": -66.752929, \"campos\": \"completo\" }, { \"lat\": -31.480693, \"lon\": -59.092813, \"aplanar\": true, \"campos\": \"completo\" } ] } ' Resultados: { \"resultados\": [ { \"ubicacion\": { \"departamento\": { \"fuente\": \"Adm. Grl. de Catastro\", \"id\": \"10035\", \"nombre\": \"Bel\u00e9n\" }, \"lat\": -27.274161, \"lon\": -66.752929, \"municipio\": { \"fuente\": \"Adm. Grl. de Catastro\", \"id\": \"100077\", \"nombre\": \"Hualf\u00edn\" }, \"provincia\": { \"fuente\": \"IGN\", \"id\": \"10\", \"nombre\": \"Catamarca\" } } }, { \"ubicacion\": { \"departamento_fuente\": \"ATER - Direc. de Catastro\", \"departamento_id\": \"30113\", \"departamento_nombre\": \"Villaguay\", \"lat\": -31.480693, \"lon\": -59.092813, \"municipio_fuente\": null, \"municipio_id\": null, \"municipio_nombre\": null, \"provincia_fuente\": \"IGN\", \"provincia_id\": \"30\", \"provincia_nombre\": \"Entre R\u00edos\" } } ] }","title":"Consultas por lotes"},{"location":"bulk/#consutas-por-lotes","text":"Todos los recursos de la API tienen una variante POST que permite realizar varias consultas en una misma petici\u00f3n. De esta forma, se pueden env\u00edar m\u00e1s consultas en menos tiempo. Las versiones de los recursos POST aceptan los mismos par\u00e1metros que las GET , con la excepci\u00f3n del par\u00e1metro formato , que obligatoriamente toma el valor json . Adicionalmente, todos los par\u00e1metros se env\u00edan a trav\u00e9s del cuerpo de la consulta HTTP, y no como parte del query string . Por ejemplo, las siguientes tres consultas: GET https://apis.datos.gob.ar/georef/api/provincias?nombre=cordoba&campos=nombre GET https://apis.datos.gob.ar/georef/api/provincias?nombre=chaco&campos=nombre GET https://apis.datos.gob.ar/georef/api/provincias?nombre=san luis&campos=nombre Son equivalentes a la siguiente consulta POST por lotes: POST https://apis.datos.gob.ar/georef/api/provincias { \"provincias\": [ { \"nombre\": \"cordoba\", \"campos\": \"nombre\" }, { \"nombre\": \"chaco\", \"campos\": \"nombre\" }, { \"nombre\": \"san luis\", \"campos\": \"nombre\" } ] } Que resultar\u00eda en la siguiente respuesta JSON: { \"resultados\": [ { \"cantidad\": 1, \"inicio\": 0, \"provincias\": [ { \"id\": \"14\", \"nombre\": \"C\u00f3rdoba\" } ], \"total\": 1 }, { \"cantidad\": 1, \"inicio\": 0, \"provincias\": [ { \"id\": \"22\", \"nombre\": \"Chaco\" } ], \"total\": 1 }, { \"cantidad\": 1, \"inicio\": 0, \"provincias\": [ { \"id\": \"74\", \"nombre\": \"San Luis\" } ], \"total\": 1 } ] } Como se muestra en el ejemplo, la respuesta contiene una lista resultados , con los resultados de cada consulta individual adentro. Las estructuras de las respuestas se mantienen id\u00e9nticas que los recursos GET . Cantidad m\u00e1xima de consultas La cantidad de consultas en una misma petici\u00f3n no debe superar las 1000. Adicionalmente, el total de los par\u00e1metros max sumados de todas las consultas no debe superar los 5000. Por ejemplo, se permite enviar 1000 consultas con max=5 , o 100 consultas con max=50 , pero no 1000 consultas con max=10 . Utilizando los recursos por lotes, se pueden normalizar mayores cantidades de datos en menos tiempo. Por ejemplo, si se cuenta con 50000 direcciones, tan solo se necesitan 10 consultas para normalizar el activo de datos entero. Utilizando los recursos GET , se necesitar\u00edan 50000 (una por dato).","title":"Consutas por lotes"},{"location":"bulk/#ejemplos-de-uso","text":"A diferencia de los recursos GET , los ejemplos de operaciones por lotes se muestran utilizando comandos constru\u00eddos sobre la herramienta curl . La secci\u00f3n de ejemplos con Python tambi\u00e9n contiene ejemplos de uso de los recursos POST .","title":"Ejemplos de uso"},{"location":"bulk/#busqueda-de-municipios-en-lotes","text":"curl -X POST \"https://apis.datos.gob.ar/georef/api/municipios\" \\ -H 'Content-Type: application/json' -d' { \"municipios\": [ { \"nombre\": \"belgrano\", \"max\": 1, \"campos\": \"id, nombre\" }, { \"nombre\": \"martin\", \"max\": 1, \"provincia\": \"la pampa\", \"aplanar\": true } ] } ' Resultados: { \"resultados\": [ { \"municipios\": [ { \"id\": \"060301\", \"nombre\": \"General Belgrano\" } ], \"cantidad\": 1, \"total\": 8, \"inicio\": 0 }, { \"municipios\": [ { \"centroide_lat\": -35.361211, \"centroide_lon\": -64.294073, \"id\": \"420126\", \"nombre\": \"Embajador Martini\", \"provincia_id\": \"42\", \"provincia_nombre\": \"La Pampa\" } ], \"cantidad\": 1, \"total\": 2, \"inicio\": 0 } ] }","title":"B\u00fasqueda de municipios en lotes"},{"location":"bulk/#normalizacion-de-direcciones-en-lotes","text":"curl -X POST \"https://apis.datos.gob.ar/georef/api/direcciones\" \\ -H 'Content-Type: application/json' -d' { \"direcciones\": [ { \"direccion\": \"santa fe 3100\", \"max\": 1, \"campos\": \"basico\" }, { \"direccion\": \"corientes 4010\", \"max\": 1, \"campos\": \"basico\", \"departamento\": \"General L\u00f3pez\" } ] } ' Resultados: { \"resultados\": [ { \"cantidad\": 1, \"direcciones\": [ { \"altura\": { \"valor\": \"3100\" }, \"calle\": { \"id\": \"0642701011435\", \"nombre\": \"SANTA FE\" }, \"calle_cruce_1\": { \"id\": null, \"nombre\": null }, \"calle_cruce_2\": { \"id\": null, \"nombre\": null }, \"nomenclatura\": \"SANTA FE 3100, La Matanza, Buenos Aires\" } ], \"inicio\": 0, \"total\": 29 }, { \"cantidad\": 1, \"direcciones\": [ { \"altura\": { \"valor\": \"4010\" }, \"calle\": { \"id\": \"8204229000610\", \"nombre\": \"CORRIENTES\" }, \"calle_cruce_1\": { \"id\": null, \"nombre\": null }, \"calle_cruce_2\": { \"id\": null, \"nombre\": null }, \"nomenclatura\": \"CORRIENTES 4010, General L\u00f3pez, Santa Fe\" } ], \"inicio\": 0, \"total\": 1 } ] }","title":"Normalizaci\u00f3n de direcciones en lotes"},{"location":"bulk/#entidades-geograficas-en-varios-puntos","text":"curl -X POST \"https://apis.datos.gob.ar/georef/api/ubicacion\" \\ -H 'Content-Type: application/json' -d' { \"ubicaciones\": [ { \"lat\": -27.274161, \"lon\": -66.752929, \"campos\": \"completo\" }, { \"lat\": -31.480693, \"lon\": -59.092813, \"aplanar\": true, \"campos\": \"completo\" } ] } ' Resultados: { \"resultados\": [ { \"ubicacion\": { \"departamento\": { \"fuente\": \"Adm. Grl. de Catastro\", \"id\": \"10035\", \"nombre\": \"Bel\u00e9n\" }, \"lat\": -27.274161, \"lon\": -66.752929, \"municipio\": { \"fuente\": \"Adm. Grl. de Catastro\", \"id\": \"100077\", \"nombre\": \"Hualf\u00edn\" }, \"provincia\": { \"fuente\": \"IGN\", \"id\": \"10\", \"nombre\": \"Catamarca\" } } }, { \"ubicacion\": { \"departamento_fuente\": \"ATER - Direc. de Catastro\", \"departamento_id\": \"30113\", \"departamento_nombre\": \"Villaguay\", \"lat\": -31.480693, \"lon\": -59.092813, \"municipio_fuente\": null, \"municipio_id\": null, \"municipio_nombre\": null, \"provincia_fuente\": \"IGN\", \"provincia_id\": \"30\", \"provincia_nombre\": \"Entre R\u00edos\" } } ] }","title":"Entidades geogr\u00e1ficas en varios puntos"},{"location":"etl-data/","text":"Modelo de datos para Georef \u00b6 Los datos generados por el ETL Georef consisten de siete (7) archivos en formato JSON, los cuales contienen provincias, departamentos, municipios, localidades, calles, cuadras e intersecciones de calles. Fuentes \u00b6 Los or\u00edgenes de los datos procesados en el ETL son: Unidades Territoriales \u00b6 Recursos: /provincias , /departamentos , /municipios , /ubicacion Fuente: Instituto Geogr\u00e1fico Nacional (IGN) Enlace: Datos Abiertos - Unidades Territoriales BAHRA \u00b6 Recursos: /localidades Fuente: Base de Asentamientos Humanos de la Rep\u00fablica Argentina (BAHRA) Enlace: BAHRA - Descargas V\u00edas de Circulaci\u00f3n \u00b6 Recursos: /calles , /direcciones Fuente: Instituto Nacional de Estad\u00edstica y Censos de la Rep\u00fablica Argentina (INDEC) Enlace: Portal de geoservicios de INDEC Cuadras \u00b6 Recursos: /calles , /direcciones Fuente: Instituto Nacional de Estad\u00edstica y Censos de la Rep\u00fablica Argentina (INDEC) Enlace: GeoServer INDEC Archivos \u00b6 A continuaci\u00f3n se detallan, a trav\u00e9s de ejemplos, los esquemas de los archivos para las entidades utilizadas. Notar que el campo version se utiliza al momento de indexar para determinar si los datos son compatibles con la versi\u00f3n de la API siendo utilizada; la versi\u00f3n detallada en este documento es la 9.0.0 . Todas las geometr\u00edas incluidas en los archivos utilizan el sistema de coordenadas WGS84 ( EPSG 4326 ). Provincias \u00b6 El archivo de datos de provincias debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"90\", // ID de provincia \"nombre\": \"Tucum\u00e1n\", // Nombre de provincia, \"nombre_completo\": \"Provincia de Tucum\u00e1n\", // Nombre completo \"iso_id\": \"AR-T\", // Identificador ISO 3166-2 \"iso_nombre\": \"Tucum\u00e1n\", // Nombre ISO \"categoria\": \"Provincia\", // Tipo de entidad \"centroide\": { \"lat\": -26.9478, // Latitud de centroide \"lon\": -65.36475 // Longitud de centroide }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiPolygon\", \"coordinates\": [[[[-58.4549, -34.5351], [-58.4545, -34.5353], ...]]] }, \"fuente\": \"IGN\" // Fuente del dato }, { ... }, ] } Departamentos \u00b6 El archivo de datos de departamentos debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"06427\", // ID del departamento \"nombre\": \"La Matanza\", // Nombre del departamento \"nombre_completo\": \"Partido de la Matanza\", // Nombre completo \"categoria\": \"Partido\", // Tipo de entidad \"centroide\": { \"lat\": -34.770165, // Latitud de centroide \"lon\": -58.625449 // Longitud de centroide }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiPolygon\", \"coordinates\": [[[[-58.4549, -34.5351], [-58.4545, -34.5353], ...]]] }, \"provincia\": { // Provincia que contiene al departamento \"id\": \"06\", \"nombre\": \"Buenos Aires\", \"interseccion\": \"0.0412936\" // Porcentaje del \u00e1rea de la provincia que ocupa el depto. }, \"fuente\": \"ARBA - Gerencia de Servicios Catastrales\" // Fuente del dato }, { ... }, ] } Municipios \u00b6 El archivo de datos de municipios debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"060105\", // ID del municipio \"nombre\": \"Bol\u00edvar\", // Nombre del municipio \"nombre_completo\": \"Municipio Bol\u00edvar\", // Nombre completo \"categoria\": \"Municipio\", // Tipo de entidad \"centroide\": { \"lat\": -36.298222, // Latitud de centroide \"lon\": -61.149648 // Longitud de centroide }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiPolygon\", \"coordinates\": [[[[-58.4453, -34.4324], [-58.6463, -34.6841], ...]]] }, \"provincia\": { // Provincia que contiene al municipio \"id\": \"06\", \"nombre\": \"Buenos Aires\", \"interseccion\": \"0.0100845\" // Porcentaje del \u00e1rea de la provincia que ocupa el municipio }, \"fuente\": \"ARBA - Gerencia de Servicios Catastrales\" // Fuente del dato }, { ... }, ] } Localidades \u00b6 El archivo de datos de localidades debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"06189080000\", // ID de la localidad \"nombre\": \"San Roman\", // Nombre de la localidad \"categoria\": \"Localidad simple (LS)\", // Tipo de asentamiento BAHRA \"centroide\": { \"lat\": -38.741555, // Latitud de centroide \"lon\": -61.537720 // Longitud de centroide }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiPoint\", \"coordinates\": [[-61.5377, -38.7415], ...] }, \"municipio\": { // Municipio que contiene a la localidad \"id\": \"060189\", // Puede ser nulo \"nombre\": \"Coronel Dorrego\" // Puede ser nulo }, \"departamento\": { // Departamento que contiene a la localidad \"id\": \"06189\", \"nombre\": \"Coronel Dorrego\" }, \"provincia\": { // Provincia que contiene a la localidad \"id\": \"06\", \"nombre\": \"Buenos Aires\" }, \"fuente\": \"INDEC\" // Fuente del dato }, { ... }, ] } Calles \u00b6 El archivo de datos de calles debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de v\u00edas de circulaci\u00f3n { \"nomenclatura\": \"LARREA, Comuna 3, Ciudad Aut\u00f3noma de Buenos Aires\", // Nomenclatura: 'nombre, departamento, provincia' \"id\": \"0202101007345\", // ID de la v\u00eda de circulaci\u00f3n \"nombre\": \"LARREA\", // Nombre de v\u00eda de circulaci\u00f3n \"categoria\": \"CALLE\", // Tipo de v\u00eda de circulaci\u00f3n \"altura\": { \"inicio\": { \"derecha\": 1, // N\u00famero inicial de altura (lado derecho) \"izquierda\": 2, // N\u00famero inicial de altura (lado izquierdo) }, \"fin\": { \"derecha\": 799, // N\u00famero final de altura (lado derecho) \"izquierda\": 800, // N\u00famero final de altura (lado izquierdo) } }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiLineString\", \"coordinates\": [[[-58.52815846522327, -34.611800397637424], ...]] }, \"departamento\": { // Departamento \"nombre\": \"Comuna 3\", \"id\": \"02021\" }, \"provincia\": { // Provincia \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\", \"id\": \"02\" }, \"fuente\": \"INDEC\" // Fuente del dato }, { ... }, ] } Cuadras \u00b6 El archivo de datos de cuadras debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de cuadras { \"id\": \"020700100230012345\", // ID de la cuadra \"calle\": { \"id\": \"0207001002300\", // ID de la calle \"nombre\": \"BOSTON\", // Nombre de la calle \"departamento\": { // Departamento de la calle \"id\": \"02070\", \"nombre\": \"Comuna 10\" }, \"provincia\": { // Provincia de la calle \"id\": \"02\", \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\" }, \"categoria\": \"CALLE\", // Tipo de la calle \"fuente\": \"INDEC\" // Fuente del dato }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiLineString\", \"coordinates\": [[[-58.52815846522327, -34.611800397637424], ...]] } } ] } Intersecciones de Calles \u00b6 El archivo de datos de intersecciones debe tener formato JSON, y no debe tener intersecciones repetidas. Dadas las calles con ID X y ID Z, solo debe estar presente la intersecci\u00f3n X-Z o Z-X. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de intersecciones { \"id\": \"0207001002300-0207001007975\", // ID de la calle A, ID de la calle B \"calle_a\": { \"id\": \"0207001002300\", // ID de la calle A \"nombre\": \"BOSTON\", // Nombre de la calle A \"departamento\": { // Departamento de la calle A \"id\": \"02070\", \"nombre\": \"Comuna 10\" }, \"provincia\": { // Provincia de la calle A \"id\": \"02\", \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\" }, \"categoria\": \"CALLE\", // Tipo de la calle A \"fuente\": \"INDEC\" // Fuente del dato }, \"calle_b\": { \"id\": \"0207001007975\", // ID de la calle B \"nombre\": \"MARCOS SASTRE\", // Nombre de la calle B \"departamento\": { // Departamento de la calle B \"id\": \"02070\", \"nombre\": \"Comuna 10\" }, \"provincia\": { // Provincia de la calle B \"id\": \"02\", \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\" }, \"categoria\": \"CALLE\", // Tipo de la calle B \"fuente\": \"INDEC\" // Fuente del dato }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"Point\", \"coordinates\": [ -58.5077676091915, -34.6150993860767 ] } } { ... }, ] }","title":"Datos"},{"location":"etl-data/#modelo-de-datos-para-georef","text":"Los datos generados por el ETL Georef consisten de siete (7) archivos en formato JSON, los cuales contienen provincias, departamentos, municipios, localidades, calles, cuadras e intersecciones de calles.","title":"Modelo de datos para Georef"},{"location":"etl-data/#fuentes","text":"Los or\u00edgenes de los datos procesados en el ETL son:","title":"Fuentes"},{"location":"etl-data/#unidades-territoriales","text":"Recursos: /provincias , /departamentos , /municipios , /ubicacion Fuente: Instituto Geogr\u00e1fico Nacional (IGN) Enlace: Datos Abiertos - Unidades Territoriales","title":"Unidades Territoriales"},{"location":"etl-data/#bahra","text":"Recursos: /localidades Fuente: Base de Asentamientos Humanos de la Rep\u00fablica Argentina (BAHRA) Enlace: BAHRA - Descargas","title":"BAHRA"},{"location":"etl-data/#vias-de-circulacion","text":"Recursos: /calles , /direcciones Fuente: Instituto Nacional de Estad\u00edstica y Censos de la Rep\u00fablica Argentina (INDEC) Enlace: Portal de geoservicios de INDEC","title":"V\u00edas de Circulaci\u00f3n"},{"location":"etl-data/#cuadras","text":"Recursos: /calles , /direcciones Fuente: Instituto Nacional de Estad\u00edstica y Censos de la Rep\u00fablica Argentina (INDEC) Enlace: GeoServer INDEC","title":"Cuadras"},{"location":"etl-data/#archivos","text":"A continuaci\u00f3n se detallan, a trav\u00e9s de ejemplos, los esquemas de los archivos para las entidades utilizadas. Notar que el campo version se utiliza al momento de indexar para determinar si los datos son compatibles con la versi\u00f3n de la API siendo utilizada; la versi\u00f3n detallada en este documento es la 9.0.0 . Todas las geometr\u00edas incluidas en los archivos utilizan el sistema de coordenadas WGS84 ( EPSG 4326 ).","title":"Archivos"},{"location":"etl-data/#provincias","text":"El archivo de datos de provincias debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"90\", // ID de provincia \"nombre\": \"Tucum\u00e1n\", // Nombre de provincia, \"nombre_completo\": \"Provincia de Tucum\u00e1n\", // Nombre completo \"iso_id\": \"AR-T\", // Identificador ISO 3166-2 \"iso_nombre\": \"Tucum\u00e1n\", // Nombre ISO \"categoria\": \"Provincia\", // Tipo de entidad \"centroide\": { \"lat\": -26.9478, // Latitud de centroide \"lon\": -65.36475 // Longitud de centroide }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiPolygon\", \"coordinates\": [[[[-58.4549, -34.5351], [-58.4545, -34.5353], ...]]] }, \"fuente\": \"IGN\" // Fuente del dato }, { ... }, ] }","title":"Provincias"},{"location":"etl-data/#departamentos","text":"El archivo de datos de departamentos debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"06427\", // ID del departamento \"nombre\": \"La Matanza\", // Nombre del departamento \"nombre_completo\": \"Partido de la Matanza\", // Nombre completo \"categoria\": \"Partido\", // Tipo de entidad \"centroide\": { \"lat\": -34.770165, // Latitud de centroide \"lon\": -58.625449 // Longitud de centroide }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiPolygon\", \"coordinates\": [[[[-58.4549, -34.5351], [-58.4545, -34.5353], ...]]] }, \"provincia\": { // Provincia que contiene al departamento \"id\": \"06\", \"nombre\": \"Buenos Aires\", \"interseccion\": \"0.0412936\" // Porcentaje del \u00e1rea de la provincia que ocupa el depto. }, \"fuente\": \"ARBA - Gerencia de Servicios Catastrales\" // Fuente del dato }, { ... }, ] }","title":"Departamentos"},{"location":"etl-data/#municipios","text":"El archivo de datos de municipios debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"060105\", // ID del municipio \"nombre\": \"Bol\u00edvar\", // Nombre del municipio \"nombre_completo\": \"Municipio Bol\u00edvar\", // Nombre completo \"categoria\": \"Municipio\", // Tipo de entidad \"centroide\": { \"lat\": -36.298222, // Latitud de centroide \"lon\": -61.149648 // Longitud de centroide }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiPolygon\", \"coordinates\": [[[[-58.4453, -34.4324], [-58.6463, -34.6841], ...]]] }, \"provincia\": { // Provincia que contiene al municipio \"id\": \"06\", \"nombre\": \"Buenos Aires\", \"interseccion\": \"0.0100845\" // Porcentaje del \u00e1rea de la provincia que ocupa el municipio }, \"fuente\": \"ARBA - Gerencia de Servicios Catastrales\" // Fuente del dato }, { ... }, ] }","title":"Municipios"},{"location":"etl-data/#localidades","text":"El archivo de datos de localidades debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"06189080000\", // ID de la localidad \"nombre\": \"San Roman\", // Nombre de la localidad \"categoria\": \"Localidad simple (LS)\", // Tipo de asentamiento BAHRA \"centroide\": { \"lat\": -38.741555, // Latitud de centroide \"lon\": -61.537720 // Longitud de centroide }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiPoint\", \"coordinates\": [[-61.5377, -38.7415], ...] }, \"municipio\": { // Municipio que contiene a la localidad \"id\": \"060189\", // Puede ser nulo \"nombre\": \"Coronel Dorrego\" // Puede ser nulo }, \"departamento\": { // Departamento que contiene a la localidad \"id\": \"06189\", \"nombre\": \"Coronel Dorrego\" }, \"provincia\": { // Provincia que contiene a la localidad \"id\": \"06\", \"nombre\": \"Buenos Aires\" }, \"fuente\": \"INDEC\" // Fuente del dato }, { ... }, ] }","title":"Localidades"},{"location":"etl-data/#calles","text":"El archivo de datos de calles debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de v\u00edas de circulaci\u00f3n { \"nomenclatura\": \"LARREA, Comuna 3, Ciudad Aut\u00f3noma de Buenos Aires\", // Nomenclatura: 'nombre, departamento, provincia' \"id\": \"0202101007345\", // ID de la v\u00eda de circulaci\u00f3n \"nombre\": \"LARREA\", // Nombre de v\u00eda de circulaci\u00f3n \"categoria\": \"CALLE\", // Tipo de v\u00eda de circulaci\u00f3n \"altura\": { \"inicio\": { \"derecha\": 1, // N\u00famero inicial de altura (lado derecho) \"izquierda\": 2, // N\u00famero inicial de altura (lado izquierdo) }, \"fin\": { \"derecha\": 799, // N\u00famero final de altura (lado derecho) \"izquierda\": 800, // N\u00famero final de altura (lado izquierdo) } }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiLineString\", \"coordinates\": [[[-58.52815846522327, -34.611800397637424], ...]] }, \"departamento\": { // Departamento \"nombre\": \"Comuna 3\", \"id\": \"02021\" }, \"provincia\": { // Provincia \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\", \"id\": \"02\" }, \"fuente\": \"INDEC\" // Fuente del dato }, { ... }, ] }","title":"Calles"},{"location":"etl-data/#cuadras_1","text":"El archivo de datos de cuadras debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de cuadras { \"id\": \"020700100230012345\", // ID de la cuadra \"calle\": { \"id\": \"0207001002300\", // ID de la calle \"nombre\": \"BOSTON\", // Nombre de la calle \"departamento\": { // Departamento de la calle \"id\": \"02070\", \"nombre\": \"Comuna 10\" }, \"provincia\": { // Provincia de la calle \"id\": \"02\", \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\" }, \"categoria\": \"CALLE\", // Tipo de la calle \"fuente\": \"INDEC\" // Fuente del dato }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"MultiLineString\", \"coordinates\": [[[-58.52815846522327, -34.611800397637424], ...]] } } ] }","title":"Cuadras"},{"location":"etl-data/#intersecciones-de-calles","text":"El archivo de datos de intersecciones debe tener formato JSON, y no debe tener intersecciones repetidas. Dadas las calles con ID X y ID Z, solo debe estar presente la intersecci\u00f3n X-Z o Z-X. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_creacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"9.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de intersecciones { \"id\": \"0207001002300-0207001007975\", // ID de la calle A, ID de la calle B \"calle_a\": { \"id\": \"0207001002300\", // ID de la calle A \"nombre\": \"BOSTON\", // Nombre de la calle A \"departamento\": { // Departamento de la calle A \"id\": \"02070\", \"nombre\": \"Comuna 10\" }, \"provincia\": { // Provincia de la calle A \"id\": \"02\", \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\" }, \"categoria\": \"CALLE\", // Tipo de la calle A \"fuente\": \"INDEC\" // Fuente del dato }, \"calle_b\": { \"id\": \"0207001007975\", // ID de la calle B \"nombre\": \"MARCOS SASTRE\", // Nombre de la calle B \"departamento\": { // Departamento de la calle B \"id\": \"02070\", \"nombre\": \"Comuna 10\" }, \"provincia\": { // Provincia de la calle B \"id\": \"02\", \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\" }, \"categoria\": \"CALLE\", // Tipo de la calle B \"fuente\": \"INDEC\" // Fuente del dato }, \"geometria\": { // Geometr\u00eda en formato GeoJSON \"type\": \"Point\", \"coordinates\": [ -58.5077676091915, -34.6150993860767 ] } } { ... }, ] }","title":"Intersecciones de Calles"},{"location":"etl-install/","text":"Instalaci\u00f3n y Ejecuci\u00f3n del ETL Georef \u00b6 El proyecto georef-ar-etl utiliza los siguientes componentes para cumplir sus funciones: PostgreSQL 9.5 PostGIS 2.4 Python 3.5 + SQLAlchemy ogr2ogr (GDAL) 2.2.2 A continuaci\u00f3n, se detallan los pasos a seguir para instalar y ejecutar el ETL en un entorno Ubuntu 16.04 (Xenial). 1. Instalaci\u00f3n \u00b6 1.2 Dependencias \u00b6 Primero, instalar PostgreSQL, PostGIS y ogr2ogr utilizando el comando apt : $ sudo add-apt-repository -y ppa:ubuntugis/ppa $ sudo apt update $ sudo apt install postgresql-9.5 postgresql-9.5-postgis-2.4 gdal-bin libpq-dev 1.2 C\u00f3digo \u00b6 Luego, clonar el repositorio: $ git clone https://github.com/datosgobar/georef-ar-etl.git $ cd georef-ar-etl 1.3 Configuraci\u00f3n \u00b6 Crear un nuevo archivo de configuraci\u00f3n georef.cfg . Se recomienda partir desde el archivo de ejemplo en config/georef.example.cfg : cp config/georef.example.cfg config/georef.cfg El archivo de configuraci\u00f3n contiene, bajo la secci\u00f3n [db] , la configuraci\u00f3n necesaria para establecer una conexi\u00f3n a la base de datos PostgreSQL. Los siguientes pasos de esta gu\u00eda utilizan los siguientes valores de ejemplo: [db] host = localhost port = 5432 database = georef_ar_etl user = georef password = changeme 1.4 Base de Datos \u00b6 Para el funcionamiento del ETL, se debe contar con una base de datos con la extensi\u00f3n PostGIS habilitada, y un usuario que pueda crear, eliminar y modificar tablas. Bajo un usuario administrador de PostgreSQL (por defecto, postgres ), utilizar el comando psql para ejecutar las sentencias necesarias: create database georef_ar_etl with encoding = 'utf-8'; create user georef with login password 'changeme'; Luego, conectarse a la base de datos utilizando el comando \\c georef_ar_etl , y ejecutar las siguientes sentencias: create extension postgis; grant all privileges on all tables in schema public to georef; 1.5 Entorno Python \u00b6 En la ra\u00edz del proyecto clonado con git , ejecutar los siguientes comandos para crear un nuevo entorno virtual de Python con venv : $ python3 -m venv env $ source env/bin/activate Luego, instalar los paquetes necesarios: (env) $ pip install -r requirements.txt 1.6 Migraci\u00f3n inicial \u00b6 Para crear las tablas utilizadas en el proceso de ETL, utilizar la receta migrate : (env) $ make migrate El comando debe volver a ejecutarse si se actualiza el proyecto y existen nuevas migraciones. 2. Ejecuci\u00f3n \u00b6 Una vez finalizado el proceso de instalaci\u00f3n, utilizar la receta run para ejecutar todas las tareas del ETL. El entorno virtual de Python debe estar activado . (env) $ make run Por defecto, los productos del ETL ser\u00e1n: Las tablas: georef_provincias georef_departamentos georef_municipios georef_localidades georef_calles georef_intersecciones georef_cuadras Y los archivos (bajo /files/latest/ ): provincias.json departamentos.json municipios.json localidades.json calles.json intersecciones.json cuadras.json","title":"Instalaci\u00f3n y Ejecuci\u00f3n"},{"location":"etl-install/#instalacion-y-ejecucion-del-etl-georef","text":"El proyecto georef-ar-etl utiliza los siguientes componentes para cumplir sus funciones: PostgreSQL 9.5 PostGIS 2.4 Python 3.5 + SQLAlchemy ogr2ogr (GDAL) 2.2.2 A continuaci\u00f3n, se detallan los pasos a seguir para instalar y ejecutar el ETL en un entorno Ubuntu 16.04 (Xenial).","title":"Instalaci\u00f3n y Ejecuci\u00f3n del ETL Georef"},{"location":"etl-install/#1-instalacion","text":"","title":"1. Instalaci\u00f3n"},{"location":"etl-install/#12-dependencias","text":"Primero, instalar PostgreSQL, PostGIS y ogr2ogr utilizando el comando apt : $ sudo add-apt-repository -y ppa:ubuntugis/ppa $ sudo apt update $ sudo apt install postgresql-9.5 postgresql-9.5-postgis-2.4 gdal-bin libpq-dev","title":"1.2 Dependencias"},{"location":"etl-install/#12-codigo","text":"Luego, clonar el repositorio: $ git clone https://github.com/datosgobar/georef-ar-etl.git $ cd georef-ar-etl","title":"1.2 C\u00f3digo"},{"location":"etl-install/#13-configuracion","text":"Crear un nuevo archivo de configuraci\u00f3n georef.cfg . Se recomienda partir desde el archivo de ejemplo en config/georef.example.cfg : cp config/georef.example.cfg config/georef.cfg El archivo de configuraci\u00f3n contiene, bajo la secci\u00f3n [db] , la configuraci\u00f3n necesaria para establecer una conexi\u00f3n a la base de datos PostgreSQL. Los siguientes pasos de esta gu\u00eda utilizan los siguientes valores de ejemplo: [db] host = localhost port = 5432 database = georef_ar_etl user = georef password = changeme","title":"1.3 Configuraci\u00f3n"},{"location":"etl-install/#14-base-de-datos","text":"Para el funcionamiento del ETL, se debe contar con una base de datos con la extensi\u00f3n PostGIS habilitada, y un usuario que pueda crear, eliminar y modificar tablas. Bajo un usuario administrador de PostgreSQL (por defecto, postgres ), utilizar el comando psql para ejecutar las sentencias necesarias: create database georef_ar_etl with encoding = 'utf-8'; create user georef with login password 'changeme'; Luego, conectarse a la base de datos utilizando el comando \\c georef_ar_etl , y ejecutar las siguientes sentencias: create extension postgis; grant all privileges on all tables in schema public to georef;","title":"1.4 Base de Datos"},{"location":"etl-install/#15-entorno-python","text":"En la ra\u00edz del proyecto clonado con git , ejecutar los siguientes comandos para crear un nuevo entorno virtual de Python con venv : $ python3 -m venv env $ source env/bin/activate Luego, instalar los paquetes necesarios: (env) $ pip install -r requirements.txt","title":"1.5 Entorno Python"},{"location":"etl-install/#16-migracion-inicial","text":"Para crear las tablas utilizadas en el proceso de ETL, utilizar la receta migrate : (env) $ make migrate El comando debe volver a ejecutarse si se actualiza el proyecto y existen nuevas migraciones.","title":"1.6 Migraci\u00f3n inicial"},{"location":"etl-install/#2-ejecucion","text":"Una vez finalizado el proceso de instalaci\u00f3n, utilizar la receta run para ejecutar todas las tareas del ETL. El entorno virtual de Python debe estar activado . (env) $ make run Por defecto, los productos del ETL ser\u00e1n: Las tablas: georef_provincias georef_departamentos georef_municipios georef_localidades georef_calles georef_intersecciones georef_cuadras Y los archivos (bajo /files/latest/ ): provincias.json departamentos.json municipios.json localidades.json calles.json intersecciones.json cuadras.json","title":"2. Ejecuci\u00f3n"},{"location":"etl/","text":"ETL del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos de Argentina \u00b6 El ETL Georef es el proyecto encargado de generar los activos de datos indexados por la API. El producto final del ETL es una serie de archivos JSON, que contienen informaci\u00f3n sobre varias entidades geogr\u00e1ficas de la Rep\u00fablica Argentina. Las siguientes secciones de la documentaci\u00f3n detallan la estructura de los archivos mencionados, y los pasos a seguir para instalar y ejecutar el ETL en un entorno propio. El c\u00f3digo que compone el ETL puede encontrarse en: https://github.com/datosgobar/georef-ar-etl .","title":"Inicio"},{"location":"etl/#etl-del-servicio-de-normalizacion-de-datos-geograficos-de-argentina","text":"El ETL Georef es el proyecto encargado de generar los activos de datos indexados por la API. El producto final del ETL es una serie de archivos JSON, que contienen informaci\u00f3n sobre varias entidades geogr\u00e1ficas de la Rep\u00fablica Argentina. Las siguientes secciones de la documentaci\u00f3n detallan la estructura de los archivos mencionados, y los pasos a seguir para instalar y ejecutar el ETL en un entorno propio. El c\u00f3digo que compone el ETL puede encontrarse en: https://github.com/datosgobar/georef-ar-etl .","title":"ETL del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos de Argentina"},{"location":"geom-operations/","text":"Operaciones con Geometr\u00edas \u00b6 La API permite a los usuarios operar con las geometr\u00edas de distintas entidades geogr\u00e1ficas. A continuaci\u00f3n, se detallan los recursos y par\u00e1metros que permiten a los usuarios realizar estas operaciones. Par\u00e1metro interseccion \u00b6 Los recursos /provincias , /departamentos , /municipios y /calles cuentan con el par\u00e1metro interseccion . El par\u00e1metro permite buscar entidades utilizando intersecci\u00f3n de geometr\u00edas como filtro. El par\u00e1metro debe tomar valores con el siguiente formato: interseccion=<tipo de entidad>:<id 1>[:<id 2>:...] Al aplicar el filtro interseccion , se buscan entidades que compartan \u00e1rea con cualquiera de las entidades listadas en la lista de IDs. Entonces, utilizar (por ejemplo) /municipios?interseccion=departamento:18105 buscar\u00eda todos los municipios que interseccionen con el departamento con ID 18105, mientras que utilizar /departamentos?interseccion=municipio:620133:540378 buscar\u00eda todos los departamentos que interseccionen con el municipio con ID 620133 o el municipio con ID 540378. De la misma forma, utilizar /calles?interseccion=municipio:620133 buscar\u00eda todas las calles que est\u00e9n contenidas en el municipio con ID 620133. Tambi\u00e9n es posible buscar municipios a partir de una calle: /municipios?interseccion=calle:0638503000235 buscar\u00eda el municipio que contiene a la calle con ID 0638503000235. IDs inv\u00e1lidos Todos los IDs listados que no correspondan a una entidad geogr\u00e1fica existente ser\u00e1n ignorados. Ejemplo completo de llamado a la API: GET https://apis.datos.gob.ar/georef/api/municipios?interseccion=departamento:18105 { \"municipios\": [ { \"centroide\": { \"lat\": -28.508559, \"lon\": -58.031593 }, \"id\": \"180042\", \"nombre\": \"Concepci\u00f3n\", \"provincia\": { \"id\": \"18\", \"nombre\": \"Corrientes\" } }, { ... } // 9 resultados omitidos ], \"cantidad\": 10, \"total\": 13, \"inicio\": 0 } Aunque el recurso /provincias acepta el par\u00e1metro interseccion , se recomienda utilizar filtros por IDs y no por geometr\u00edas al momento de buscar provincias, ya que el filtrado por ID es m\u00e1s performante. Por ejemplo, la consulta /provincias?interseccion=departamento:18105 es equivalente a la consulta /provincias?id=18 , ya que los primeros dos d\u00edgitos de los c\u00f3digos de los departamentos siempre corresponden a su provincia. Recurso /ubicacion \u00b6 En la secci\u00f3n de inicio , se di\u00f3 un ejemplo de uso del recurso /ubicacion para enriquecer datos existentes. El recurso utiliza las geometr\u00edas de las entidades geogr\u00e1ficas para determinar cu\u00e1les contienen al punto especificado por el usuario a trav\u00e9s de los par\u00e1metros lat y lon . Las entidades devueltas son las siguientes: Provincia Departamento Municipio (opcional) Dependiendo del punto elegido, es posible no obtener un municipio como parte de la respuesta de la API. Como ejemplo, se muestran dos llamados distintos al recurso /ubicacion . Con municipio: GET https://apis.datos.gob.ar/georef/api/ubicacion?lat=-27.2741&lon=-66.7529 { \"ubicacion\": { \"departamento\": { \"id\": \"10035\", \"nombre\": \"Bel\u00e9n\" }, \"lat\": -27.2741, \"lon\": -66.7529, \"municipio\": { \"id\": \"100077\", \"nombre\": \"Hualf\u00edn\" }, \"provincia\": { \"id\": \"10\", \"nombre\": \"Catamarca\" } } } Sin municipio: GET https://apis.datos.gob.ar/georef/api/ubicacion?lat=-28.504&lon=-62.898 { \"ubicacion\": { \"departamento\": { \"id\": \"86028\", \"nombre\": \"Avellaneda\" }, \"lat\": -28.504, \"lon\": -62.898, \"municipio\": { \"id\": null, \"nombre\": null }, \"provincia\": { \"id\": \"86\", \"nombre\": \"Santiago del Estero\" } } }","title":"Operaciones con geometr\u00edas"},{"location":"geom-operations/#operaciones-con-geometrias","text":"La API permite a los usuarios operar con las geometr\u00edas de distintas entidades geogr\u00e1ficas. A continuaci\u00f3n, se detallan los recursos y par\u00e1metros que permiten a los usuarios realizar estas operaciones.","title":"Operaciones con Geometr\u00edas"},{"location":"geom-operations/#parametro-interseccion","text":"Los recursos /provincias , /departamentos , /municipios y /calles cuentan con el par\u00e1metro interseccion . El par\u00e1metro permite buscar entidades utilizando intersecci\u00f3n de geometr\u00edas como filtro. El par\u00e1metro debe tomar valores con el siguiente formato: interseccion=<tipo de entidad>:<id 1>[:<id 2>:...] Al aplicar el filtro interseccion , se buscan entidades que compartan \u00e1rea con cualquiera de las entidades listadas en la lista de IDs. Entonces, utilizar (por ejemplo) /municipios?interseccion=departamento:18105 buscar\u00eda todos los municipios que interseccionen con el departamento con ID 18105, mientras que utilizar /departamentos?interseccion=municipio:620133:540378 buscar\u00eda todos los departamentos que interseccionen con el municipio con ID 620133 o el municipio con ID 540378. De la misma forma, utilizar /calles?interseccion=municipio:620133 buscar\u00eda todas las calles que est\u00e9n contenidas en el municipio con ID 620133. Tambi\u00e9n es posible buscar municipios a partir de una calle: /municipios?interseccion=calle:0638503000235 buscar\u00eda el municipio que contiene a la calle con ID 0638503000235. IDs inv\u00e1lidos Todos los IDs listados que no correspondan a una entidad geogr\u00e1fica existente ser\u00e1n ignorados. Ejemplo completo de llamado a la API: GET https://apis.datos.gob.ar/georef/api/municipios?interseccion=departamento:18105 { \"municipios\": [ { \"centroide\": { \"lat\": -28.508559, \"lon\": -58.031593 }, \"id\": \"180042\", \"nombre\": \"Concepci\u00f3n\", \"provincia\": { \"id\": \"18\", \"nombre\": \"Corrientes\" } }, { ... } // 9 resultados omitidos ], \"cantidad\": 10, \"total\": 13, \"inicio\": 0 } Aunque el recurso /provincias acepta el par\u00e1metro interseccion , se recomienda utilizar filtros por IDs y no por geometr\u00edas al momento de buscar provincias, ya que el filtrado por ID es m\u00e1s performante. Por ejemplo, la consulta /provincias?interseccion=departamento:18105 es equivalente a la consulta /provincias?id=18 , ya que los primeros dos d\u00edgitos de los c\u00f3digos de los departamentos siempre corresponden a su provincia.","title":"Par\u00e1metro interseccion"},{"location":"geom-operations/#recurso-ubicacion","text":"En la secci\u00f3n de inicio , se di\u00f3 un ejemplo de uso del recurso /ubicacion para enriquecer datos existentes. El recurso utiliza las geometr\u00edas de las entidades geogr\u00e1ficas para determinar cu\u00e1les contienen al punto especificado por el usuario a trav\u00e9s de los par\u00e1metros lat y lon . Las entidades devueltas son las siguientes: Provincia Departamento Municipio (opcional) Dependiendo del punto elegido, es posible no obtener un municipio como parte de la respuesta de la API. Como ejemplo, se muestran dos llamados distintos al recurso /ubicacion . Con municipio: GET https://apis.datos.gob.ar/georef/api/ubicacion?lat=-27.2741&lon=-66.7529 { \"ubicacion\": { \"departamento\": { \"id\": \"10035\", \"nombre\": \"Bel\u00e9n\" }, \"lat\": -27.2741, \"lon\": -66.7529, \"municipio\": { \"id\": \"100077\", \"nombre\": \"Hualf\u00edn\" }, \"provincia\": { \"id\": \"10\", \"nombre\": \"Catamarca\" } } } Sin municipio: GET https://apis.datos.gob.ar/georef/api/ubicacion?lat=-28.504&lon=-62.898 { \"ubicacion\": { \"departamento\": { \"id\": \"86028\", \"nombre\": \"Avellaneda\" }, \"lat\": -28.504, \"lon\": -62.898, \"municipio\": { \"id\": null, \"nombre\": null }, \"provincia\": { \"id\": \"86\", \"nombre\": \"Santiago del Estero\" } } }","title":"Recurso /ubicacion"},{"location":"georef-api-development/","text":"Gu\u00eda de instalaci\u00f3n y ejecuci\u00f3n para desarrolladores \u00b6 En este documento se detallan los pasos a seguir si se desea configurar un servidor de API Georef propio. Dependencias \u00b6 Elasticsearch >=6.4.2 Python >=3.6.x Nginx (para entornos productivos) Instalaci\u00f3n \u00b6 1. Elasticsearch \u00b6 Para instalar Elasticsearch, seguir las siguientes instrucciones en uno o m\u00e1s servidores (nodos). 1.1 Instalar el entorno de ejecuci\u00f3n para Java: \u00b6 $ sudo apt install default-jre 1.2 Instalar Elasticsearch \u00b6 Instalar Elasticsearch e iniciar el servicio con systemctl : $ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.2.deb $ sudo dpkg -i elasticsearch-6.4.2.deb $ sudo systemctl enable elasticsearch 1.3 Aplicar las configuraciones recomendadas \u00b6 Editar el archivo /etc/elasticsearch/elasticsearch.yml (el valor de node.name debe ser \u00fanico por nodo): node.name: node-1 http.max_content_length: 100mb Editar el archivo /etc/elasticsearch/jvm.options (siguiendo las recomendaciones de Elasticsearch ): # Tama\u00f1o del heap size de la JVM # Se recomienda utilizar siempre el mismo valor como m\u00ednimo y m\u00e1ximo # Ejemplo: 4 GB -Xms4g -Xmx4g 2. Repositorio y dependencias \u00b6 2.1 Clonar el repositorio: \u00b6 $ git clone https://github.com/datosgobar/georef-ar-api.git $ cd georef-ar-api 2.2 Crear un entorno virtual y activarlo \u00b6 $ python3 -m venv venv $ source venv/bin/activate 2.3 Instalar dependencias con pip \u00b6 (venv) $ pip3 install -r requirements.txt -r requirements-dev.txt 2.4 Copiar el archivo de configuraci\u00f3n \u00b6 (venv) $ cp config/georef.example.cfg config/georef.cfg Luego, completar el archivo config/georef.cfg con los valores apropiados. 2.5 Copiar el archivo de configuraci\u00f3n de logs \u00b6 (venv) $ cp config/logging.example.ini config/logging.ini Luego, completar el archivo config/logging.ini con los valores apropiados. Los valores por defecto son v\u00e1lidos y pueden ser utilizados en entornos productivos. 3. Crear los \u00edndices \u00b6 Generar \u00edndices de entidades y calles: (venv) $ make index Listar los \u00edndices creados, y otros datos adicionales: (venv) $ make print_index_stats 4. (Opcional) Re-indexar datos \u00b6 Si se modifican los archivos de datos JSON, es posible re-indexarlos sin borrar los \u00edndices ya existentes. Dependiendo del comportamiento que se desee, se debe tomar una opci\u00f3n: Indexar datos nuevos \u00b6 Si se desea actualizar los \u00edndices con los nuevos datos, solo si los datos entrantes son m\u00e1s recientes, se puede utilizar nuevamente: (venv) $ make index Forzar re-indexado \u00b6 Si se desea forzar un re-indexado, es decir, si se desea indexar los datos nuevamente sin importar la fecha de creaci\u00f3n, se debe utilizar la siguiente receta: (venv) $ make index_forced La receta index_forced intenta utilizar un archivo de respaldo guardado anteriormente si no pudo acceder a los archivos especificados en config/georef.cfg . El uso de la receta es recomendado cuando se requiere re-indexar los datos incondicionalmente, algunas situaciones donde esto es necesario son: Modificaci\u00f3n de la estructura de los archivos de datos Modificaci\u00f3n de mappeos de tipos de Elasticsearch Modificaci\u00f3n de analizadores de texto de Elasticsearch Modificaci\u00f3n de listado de sin\u00f3nimos Modificaci\u00f3n de listado de t\u00e9rminos excluyentes Cualquiera de las dos opciones tambi\u00e9n permite indexar datos selectivamente: se debe especificar el nombre del \u00edndice a crear/re-indexar. Por ejemplo: (venv) $ make index INDEX_NAME=localidades (venv) $ make index_forced INDEX_NAME=calles Los nombres de los \u00edndices disponibles son: provincias provincias-geometria departamentos departamentos-geometria municipios municipios-geometria localidades calles intersecciones cuadras 5. Correr API \u00b6 Entornos de desarrollo \u00b6 Correr la API de Georef utilizando un servidor de prueba (no apto para producci\u00f3n): (venv) $ make start_dev_server O Tambi\u00e9n: (venv) $ make start_gunicorn_dev_server Entornos productivos \u00b6 5.1 Configurar servicio georef-ar-api para systemd \u00b6 Copiar el archivo config/georef-ar-api.service a /etc/systemd/system/ y configurarlo. Notar los campos marcados entre ' < ' y ' > ', que deben ser reemplazados por el usuario. 5.2 Activar y arrancar el servicio \u00b6 $ sudo systemctl daemon-reload $ sudo systemctl enable georef-ar-api.service $ sudo systemctl start georef-ar-api.service 5.3 Configurar nginx \u00b6 Primero, crear /etc/nginx/sites-available/georef-ar-api.nginx tomando como base la configuraci\u00f3n del archivo georef-ar-api.nginx . 5.4 (Opcional) Crear cache para nginx \u00b6 Si se desea activar el uso del cache de nginx , descomentar las l\u00edneas contentiendo las directivas proxy_cache y proxy_cache_valid del archivo georef-ar-api.nginx creado. Luego, activar el cache georef agregando la siguiente l\u00ednea al archivo de configuraci\u00f3n nginx.conf (secci\u00f3n http ): proxy_cache_path /data/nginx/cache levels=1:2 inactive=120m keys_zone=georef:10m use_temp_path=off; Finalmente, crear el directorio /data/nginx/cache . 5.5 Activar y validar configuraci\u00f3n nginx \u00b6 Generar un link simb\u00f3lico a la configuraci\u00f3n del sitio: $ sudo ln -s /etc/nginx/sites-available/georef-ar-api.nginx /etc/nginx/sites-enabled/georef-ar-api.nginx Validar la configuraci\u00f3n: $ sudo nginx -T Reiniciar Nginx: $ systemctl restart nginx.service Tests \u00b6 Para ejecutar los tests unitarios (el servicio Elasticsearch debe estar activo y con los datos apropiados cargados): (venv) $ make test Para m\u00e1s informaci\u00f3n sobre los tests, ver el archivo tests/README.md . Para comprobar que no existan errores comunes en el c\u00f3digo, y que su estilo sea correcto: (venv) $ make code_checks Archivos de datos \u00b6 La estructura de los archivos de datos JSON utilizados por Georef est\u00e1 detallada en este documento . El archivo de configuraci\u00f3n config/georef.cfg debe especificar una ruta local o una URL externa para cada archivo de datos JSON. Notar que los valores por defecto (en georef.example.cfg ) utilizan el portal de descargas infra.datos.gob.ar , que siempre provee la \u00faltima versi\u00f3n de los archivos JSON disponibles. La rama master de georef-ar-api siempre se mantiene compatible con la \u00faltima versi\u00f3n de los datos disponibles en infra.datos.gob.ar . El archivo de configuraci\u00f3n config/georef.cfg tambi\u00e9n debe especificar la URL del archivo de sin\u00f3nimos para utilizar al momento de indexar campos de texto en Elasticsearch. El valor por defecto en georef.example.cfg puede ser utilizado, ya que utiliza la versi\u00f3n del archivo almacenado en infra.datos.gob.ar . El mismo criterio se aplica al archivo de t\u00e9rminos excluyentes.","title":"Instalaci\u00f3n y Ejecuci\u00f3n"},{"location":"georef-api-development/#guia-de-instalacion-y-ejecucion-para-desarrolladores","text":"En este documento se detallan los pasos a seguir si se desea configurar un servidor de API Georef propio.","title":"Gu\u00eda de instalaci\u00f3n y ejecuci\u00f3n para desarrolladores"},{"location":"georef-api-development/#dependencias","text":"Elasticsearch >=6.4.2 Python >=3.6.x Nginx (para entornos productivos)","title":"Dependencias"},{"location":"georef-api-development/#instalacion","text":"","title":"Instalaci\u00f3n"},{"location":"georef-api-development/#1-elasticsearch","text":"Para instalar Elasticsearch, seguir las siguientes instrucciones en uno o m\u00e1s servidores (nodos).","title":"1. Elasticsearch"},{"location":"georef-api-development/#11-instalar-el-entorno-de-ejecucion-para-java","text":"$ sudo apt install default-jre","title":"1.1 Instalar el entorno de ejecuci\u00f3n para Java:"},{"location":"georef-api-development/#12-instalar-elasticsearch","text":"Instalar Elasticsearch e iniciar el servicio con systemctl : $ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.4.2.deb $ sudo dpkg -i elasticsearch-6.4.2.deb $ sudo systemctl enable elasticsearch","title":"1.2 Instalar Elasticsearch"},{"location":"georef-api-development/#13-aplicar-las-configuraciones-recomendadas","text":"Editar el archivo /etc/elasticsearch/elasticsearch.yml (el valor de node.name debe ser \u00fanico por nodo): node.name: node-1 http.max_content_length: 100mb Editar el archivo /etc/elasticsearch/jvm.options (siguiendo las recomendaciones de Elasticsearch ): # Tama\u00f1o del heap size de la JVM # Se recomienda utilizar siempre el mismo valor como m\u00ednimo y m\u00e1ximo # Ejemplo: 4 GB -Xms4g -Xmx4g","title":"1.3 Aplicar las configuraciones recomendadas"},{"location":"georef-api-development/#2-repositorio-y-dependencias","text":"","title":"2. Repositorio y dependencias"},{"location":"georef-api-development/#21-clonar-el-repositorio","text":"$ git clone https://github.com/datosgobar/georef-ar-api.git $ cd georef-ar-api","title":"2.1 Clonar el repositorio:"},{"location":"georef-api-development/#22-crear-un-entorno-virtual-y-activarlo","text":"$ python3 -m venv venv $ source venv/bin/activate","title":"2.2 Crear un entorno virtual y activarlo"},{"location":"georef-api-development/#23-instalar-dependencias-con-pip","text":"(venv) $ pip3 install -r requirements.txt -r requirements-dev.txt","title":"2.3 Instalar dependencias con pip"},{"location":"georef-api-development/#24-copiar-el-archivo-de-configuracion","text":"(venv) $ cp config/georef.example.cfg config/georef.cfg Luego, completar el archivo config/georef.cfg con los valores apropiados.","title":"2.4 Copiar el archivo de configuraci\u00f3n"},{"location":"georef-api-development/#25-copiar-el-archivo-de-configuracion-de-logs","text":"(venv) $ cp config/logging.example.ini config/logging.ini Luego, completar el archivo config/logging.ini con los valores apropiados. Los valores por defecto son v\u00e1lidos y pueden ser utilizados en entornos productivos.","title":"2.5 Copiar el archivo de configuraci\u00f3n de logs"},{"location":"georef-api-development/#3-crear-los-indices","text":"Generar \u00edndices de entidades y calles: (venv) $ make index Listar los \u00edndices creados, y otros datos adicionales: (venv) $ make print_index_stats","title":"3. Crear los \u00edndices"},{"location":"georef-api-development/#4-opcional-re-indexar-datos","text":"Si se modifican los archivos de datos JSON, es posible re-indexarlos sin borrar los \u00edndices ya existentes. Dependiendo del comportamiento que se desee, se debe tomar una opci\u00f3n:","title":"4. (Opcional) Re-indexar datos"},{"location":"georef-api-development/#indexar-datos-nuevos","text":"Si se desea actualizar los \u00edndices con los nuevos datos, solo si los datos entrantes son m\u00e1s recientes, se puede utilizar nuevamente: (venv) $ make index","title":"Indexar datos nuevos"},{"location":"georef-api-development/#forzar-re-indexado","text":"Si se desea forzar un re-indexado, es decir, si se desea indexar los datos nuevamente sin importar la fecha de creaci\u00f3n, se debe utilizar la siguiente receta: (venv) $ make index_forced La receta index_forced intenta utilizar un archivo de respaldo guardado anteriormente si no pudo acceder a los archivos especificados en config/georef.cfg . El uso de la receta es recomendado cuando se requiere re-indexar los datos incondicionalmente, algunas situaciones donde esto es necesario son: Modificaci\u00f3n de la estructura de los archivos de datos Modificaci\u00f3n de mappeos de tipos de Elasticsearch Modificaci\u00f3n de analizadores de texto de Elasticsearch Modificaci\u00f3n de listado de sin\u00f3nimos Modificaci\u00f3n de listado de t\u00e9rminos excluyentes Cualquiera de las dos opciones tambi\u00e9n permite indexar datos selectivamente: se debe especificar el nombre del \u00edndice a crear/re-indexar. Por ejemplo: (venv) $ make index INDEX_NAME=localidades (venv) $ make index_forced INDEX_NAME=calles Los nombres de los \u00edndices disponibles son: provincias provincias-geometria departamentos departamentos-geometria municipios municipios-geometria localidades calles intersecciones cuadras","title":"Forzar re-indexado"},{"location":"georef-api-development/#5-correr-api","text":"","title":"5. Correr API"},{"location":"georef-api-development/#entornos-de-desarrollo","text":"Correr la API de Georef utilizando un servidor de prueba (no apto para producci\u00f3n): (venv) $ make start_dev_server O Tambi\u00e9n: (venv) $ make start_gunicorn_dev_server","title":"Entornos de desarrollo"},{"location":"georef-api-development/#entornos-productivos","text":"","title":"Entornos productivos"},{"location":"georef-api-development/#51-configurar-servicio-georef-ar-api-para-systemd","text":"Copiar el archivo config/georef-ar-api.service a /etc/systemd/system/ y configurarlo. Notar los campos marcados entre ' < ' y ' > ', que deben ser reemplazados por el usuario.","title":"5.1 Configurar servicio georef-ar-api para systemd"},{"location":"georef-api-development/#52-activar-y-arrancar-el-servicio","text":"$ sudo systemctl daemon-reload $ sudo systemctl enable georef-ar-api.service $ sudo systemctl start georef-ar-api.service","title":"5.2 Activar y arrancar el servicio"},{"location":"georef-api-development/#53-configurar-nginx","text":"Primero, crear /etc/nginx/sites-available/georef-ar-api.nginx tomando como base la configuraci\u00f3n del archivo georef-ar-api.nginx .","title":"5.3 Configurar nginx"},{"location":"georef-api-development/#54-opcional-crear-cache-para-nginx","text":"Si se desea activar el uso del cache de nginx , descomentar las l\u00edneas contentiendo las directivas proxy_cache y proxy_cache_valid del archivo georef-ar-api.nginx creado. Luego, activar el cache georef agregando la siguiente l\u00ednea al archivo de configuraci\u00f3n nginx.conf (secci\u00f3n http ): proxy_cache_path /data/nginx/cache levels=1:2 inactive=120m keys_zone=georef:10m use_temp_path=off; Finalmente, crear el directorio /data/nginx/cache .","title":"5.4 (Opcional) Crear cache para nginx"},{"location":"georef-api-development/#55-activar-y-validar-configuracion-nginx","text":"Generar un link simb\u00f3lico a la configuraci\u00f3n del sitio: $ sudo ln -s /etc/nginx/sites-available/georef-ar-api.nginx /etc/nginx/sites-enabled/georef-ar-api.nginx Validar la configuraci\u00f3n: $ sudo nginx -T Reiniciar Nginx: $ systemctl restart nginx.service","title":"5.5 Activar y validar configuraci\u00f3n nginx"},{"location":"georef-api-development/#tests","text":"Para ejecutar los tests unitarios (el servicio Elasticsearch debe estar activo y con los datos apropiados cargados): (venv) $ make test Para m\u00e1s informaci\u00f3n sobre los tests, ver el archivo tests/README.md . Para comprobar que no existan errores comunes en el c\u00f3digo, y que su estilo sea correcto: (venv) $ make code_checks","title":"Tests"},{"location":"georef-api-development/#archivos-de-datos","text":"La estructura de los archivos de datos JSON utilizados por Georef est\u00e1 detallada en este documento . El archivo de configuraci\u00f3n config/georef.cfg debe especificar una ruta local o una URL externa para cada archivo de datos JSON. Notar que los valores por defecto (en georef.example.cfg ) utilizan el portal de descargas infra.datos.gob.ar , que siempre provee la \u00faltima versi\u00f3n de los archivos JSON disponibles. La rama master de georef-ar-api siempre se mantiene compatible con la \u00faltima versi\u00f3n de los datos disponibles en infra.datos.gob.ar . El archivo de configuraci\u00f3n config/georef.cfg tambi\u00e9n debe especificar la URL del archivo de sin\u00f3nimos para utilizar al momento de indexar campos de texto en Elasticsearch. El valor por defecto en georef.example.cfg puede ser utilizado, ya que utiliza la versi\u00f3n del archivo almacenado en infra.datos.gob.ar . El mismo criterio se aplica al archivo de t\u00e9rminos excluyentes.","title":"Archivos de datos"},{"location":"history/","text":"Historial de versiones \u00b6 0.3.3 - 2019/02/11 \u00b6 Corrige error HTTP 500 lanzado cuando se utilizaban valores como \"NaN\" o \"Inifinity\" para par\u00e1metros lat y lon en /ubicacion . 0.3.2 - 2019/02/05 \u00b6 El par\u00e1metro interseccion de los recursos /provincias , /departamentos y /calles ahora aceptan IDs de calles como par\u00e1metros. Modifica cantidad de m\u00e1xima de consultas en una sola petici\u00f3n POST a 1000 (era 5000). El nuevo valor permite normalizar datos a una velocidad pr\u00e1cticamente igual a la anterior, pero con una menor carga a la infraestructura. 0.3.1 - 2019/01/29 \u00b6 Mejora interpretaci\u00f3n de direcciones ( georef-ar-address versi\u00f3n 0.0.7 ). Corrige error HTTP 500 lanzado en normalizaci\u00f3n de direcciones, en casos donde el comienzo y el fin de alturas de la calle comparten el mismo valor, y la direcci\u00f3n tiene ese valor exacto como altura. 0.3.0 - 2019/01/24 \u00b6 Agrega XML como nuevo formato de respuesta de datos para todos los recursos. Para utilizarlo, agregar formato=xml a los par\u00e1metros de la URL. Agrega Shapefile como nuevo formato de respuesta de datos para todos los recursos (excepto /direcciones y /ubicacion ). Para utilizarlo, agregar formato=shp a los par\u00e1metros de la URL. El archivo descargado contiene las geometr\u00edas e informaci\u00f3n de todas las entidades filtradas. Para m\u00e1s detalles, consultar la documentaci\u00f3n de descarga de geometr\u00edas . El par\u00e1metro id ahora acepta listas de IDs separadas por comas. Otros par\u00e1metros que aceptaban un ID tambi\u00e9n aceptan ahora listas de IDs. Actualiza versi\u00f3n de datos de ETL a 9.0.0 . Corrige mensajes de error equivocados. Cambios varios al recurso /direcciones : Utilizando la librer\u00eda georef-ar-address , se mejor\u00f3 el proceso de interpretaci\u00f3n de las direcciones recibidas. Ahora, se aceptan m\u00e1s tipos de direcciones, y la API es capaz de detectar errores comunes de escritura. Para m\u00e1s detalles, consultar la nueva documentaci\u00f3n de normalizaci\u00f3n de direcciones . Se removi\u00f3 el par\u00e1metro tipo . Se modific\u00f3 el campo de respuesta altura a un objecto altura que contiene los valores valor y unidad. Se removieron los campos nombre y id , y se agregaron los nuevos campos objeto calle , calle_cruce_1 y calle_cruce_2 . Cada uno contiene los campos nombre , id y categoria , y representan las calles normalizadas que fueron detectadas en la direcci\u00f3n de entrada. Se agreg\u00f3 el campo piso . Se modificaron los nombres y el orden de los campos de respuesta en formato CSV. Cambios al recurso /provincias : Se agregaron los campos nombre_completo , iso_id , iso_nombre y categoria . Cambios al recurso /departamentos : Se agregaron los campos nombre_completo y categoria . Cambios al recurso /municipios : Se agregaron los campos nombre_completo y categoria . Par\u00e1metro interseccion : agrega calle como tipo de entidad posible a utilizar. Cambios al recurso /localidades : Se modific\u00f3 el nombre del campo tipo a categoria . Cambios al recurso /calles : Se modific\u00f3 el nombre del campo tipo a categoria . Se modific\u00f3 el nombre del par\u00e1metro tipo a categoria . Agrega par\u00e1metro interseccion : permite buscar calles por intersecci\u00f3n con geometr\u00edas de otras entidades. Cambios al recurso /ubicacion : Se removi\u00f3 el campo fuente , y se agregaron los campos provincia.fuente , departamento.fuente y municipio.fuente . 0.2.3 - 2018/12/11 \u00b6 Modifica formato de respuestas CSV: todos los campos no-num\u00e9ricos ahora son devueltos entre comillas dobles. El cambio permite a algunas herramientas manejar mejor los valores de IDs, que consisten enteramente de d\u00edgitos, pero deber\u00edan ser tratados como texto. El par\u00e1metro 'direccion' del recurso /direcciones ahora acepta direcciones con altura 0. Mejora la fidelidad de resultados por en b\u00fasquedas por nombre: algunos t\u00e9rminos de b\u00fasqueda ahora excluyen a otros, aunque sean textualmente similares. Por ejemplo, buscar 'salta' no incluye resultados con 'santa', ya que los dos t\u00e9rminos refieren a entidades claramente distintas. 0.2.2 - 2018/11/05 \u00b6 El par\u00e1metro 'direccion' del recurso /direcciones ahora acepta direcciones sin altura (por ejemplo, \"Avenida Santa Fe\"). Este cambio permite utilizar la versi\u00f3n POST del recurso con mayor facilidad, en caso de tener grandes cantidades de datos con y sin alturas en un mismo conjunto. Mejoras a mensajes de error para par\u00e1metros 'direccion' e 'interseccion'. 0.2.1 - 2018/10/25 \u00b6 Actualiza proceso de indexaci\u00f3n para utilizar datos de ETL versi\u00f3n 6.0.0 . Agrega mensaje de error descriptivo para errores HTTP 405. Mejora par\u00e1metro 'campos': se permite especificar un prefixo para referirse a varios campos (por ejemplo, provincia para provincia.id y provincia.nombre ). Agrega par\u00e1metro interseccion . El mismo permite buscar provincias, departamentos y municipios utilizando intersecci\u00f3n de geometr\u00edas con otras entidades geogr\u00e1ficas. Se pueden buscar provincias por intersecci\u00f3n con municipios y departamentos. Se pueden buscar departamentos por intersecci\u00f3n con provincias y municipios. Se pueden buscar municipios por intersecci\u00f3n con provincias y departamentos. Agrega nuevo campo de datos provincia.interseccion a recursos /municipios y /departamentos . El campo especifica qu\u00e9 porcentaje del \u00e1rea de la provincia ocupa la entidad en s\u00ed. Agrega nuevos recursos de descarga de datos completos. Estos recursos permiten descargar la totalidad de los datos utilizados por cada recurso, en distintos formatos. Por ejemplo, para descargar los datos de provincias, se puede acceder a las siguientes URLs: https://apis.datos.gob.ar/georef/api/provincias.json https://apis.datos.gob.ar/georef/api/provincias.csv https://apis.datos.gob.ar/georef/api/provincias.geojson 0.2.0 - 2018/09/21 \u00b6 Remueve campo 'departamento' de la entidad municipio. Esto se debe a que los departamentos no son padres jer\u00e1rquicos de los municipios. Agrega par\u00e1metro orden a recursos /calles y /direcciones . Agrega formato GeoJSON a recurso /direcciones . Agrega conjuntos de campos predefinidos al par\u00e1metro campos , los valores posibles son: basico estandar (utilizado por defecto) completo Mueve campo de respuestas fuente a conjunto completo . Permite el uso del par\u00e1metro aplanar en respuestas GeoJSON. 0.1.6 - 2018/09/07 \u00b6 Actualiza proceso de indexaci\u00f3n para utilizar datos de ETL versi\u00f3n 4.0.0 . Modifica manejo de altura en recurso /direcciones . La nueva versi\u00f3n del recurso intenta ubicar altura dentro de los extremos de la calle tomando en consideraci\u00f3n que los datos pueden no siempre estar completos (o ser ideales). Este cambio tambi\u00e9n afecta la efectividad de la geolocalizaci\u00f3n de direcciones. 0.1.5 - 2018/09/04 \u00b6 Mejora mensajes de errores para varios casos: Acceso a recursos inexistentes (por ejemplo: /provincia ). Valores inv\u00e1lidos para par\u00e1metros con elecci\u00f3n limitada de valores (por ejemplo, orden ). Listas de operaciones bulk inv\u00e1lidas. Direcciones de calles malformadas. Agrega API de paginado. Nuevo par\u00e1metro: inicio . Los resultados ahora incluyen tres metadatos: cantidad , total e inicio . 0.1.4 - 2018/08/23 \u00b6 Se modific\u00f3 la interpretaci\u00f3n del par\u00e1metro direccion del recurso /direcciones : Se ignoran \u00edtems entre par\u00e9ntesis y ocurrencias de \"N\u00b0\" Se separa el texto utilizando \"-\", \",\" y \"B\u00b0\", y se intenta extraer una direcci\u00f3n (nombre + altura) de cada fragmento. 0.1.3 - 2018/08/21 \u00b6 Se modificaron los siguientes campos: centroide_lat y centroide_lon ahora est\u00e1n anidados. Los campos altura_inicio_derecha , altura_fin_derecha , etc. ahora est\u00e1n anidados. Se agreg\u00f3 una validaci\u00f3n de valores repetidos para par\u00e1metro campos . El recurso /provincias ahora acepta el par\u00e1metro aplanar . 0.1.2 - 2018/08/16 \u00b6 Se removi\u00f3 d como stopword en Elasticsearch. 0.1.1 - 2018/08/15 \u00b6 Se modificaron los siguientes campos: lat ahora es centroide_lat . lon ahora es centroide_lon . Los campos inicio_derecha , fin_derecha , etc. ahora comienzan con altura_ . 0.1.0 - 2018/08/14 \u00b6 Versi\u00f3n inicial.","title":"Historial de versiones"},{"location":"history/#historial-de-versiones","text":"","title":"Historial de versiones"},{"location":"history/#033-20190211","text":"Corrige error HTTP 500 lanzado cuando se utilizaban valores como \"NaN\" o \"Inifinity\" para par\u00e1metros lat y lon en /ubicacion .","title":"0.3.3 - 2019/02/11"},{"location":"history/#032-20190205","text":"El par\u00e1metro interseccion de los recursos /provincias , /departamentos y /calles ahora aceptan IDs de calles como par\u00e1metros. Modifica cantidad de m\u00e1xima de consultas en una sola petici\u00f3n POST a 1000 (era 5000). El nuevo valor permite normalizar datos a una velocidad pr\u00e1cticamente igual a la anterior, pero con una menor carga a la infraestructura.","title":"0.3.2 - 2019/02/05"},{"location":"history/#031-20190129","text":"Mejora interpretaci\u00f3n de direcciones ( georef-ar-address versi\u00f3n 0.0.7 ). Corrige error HTTP 500 lanzado en normalizaci\u00f3n de direcciones, en casos donde el comienzo y el fin de alturas de la calle comparten el mismo valor, y la direcci\u00f3n tiene ese valor exacto como altura.","title":"0.3.1 - 2019/01/29"},{"location":"history/#030-20190124","text":"Agrega XML como nuevo formato de respuesta de datos para todos los recursos. Para utilizarlo, agregar formato=xml a los par\u00e1metros de la URL. Agrega Shapefile como nuevo formato de respuesta de datos para todos los recursos (excepto /direcciones y /ubicacion ). Para utilizarlo, agregar formato=shp a los par\u00e1metros de la URL. El archivo descargado contiene las geometr\u00edas e informaci\u00f3n de todas las entidades filtradas. Para m\u00e1s detalles, consultar la documentaci\u00f3n de descarga de geometr\u00edas . El par\u00e1metro id ahora acepta listas de IDs separadas por comas. Otros par\u00e1metros que aceptaban un ID tambi\u00e9n aceptan ahora listas de IDs. Actualiza versi\u00f3n de datos de ETL a 9.0.0 . Corrige mensajes de error equivocados. Cambios varios al recurso /direcciones : Utilizando la librer\u00eda georef-ar-address , se mejor\u00f3 el proceso de interpretaci\u00f3n de las direcciones recibidas. Ahora, se aceptan m\u00e1s tipos de direcciones, y la API es capaz de detectar errores comunes de escritura. Para m\u00e1s detalles, consultar la nueva documentaci\u00f3n de normalizaci\u00f3n de direcciones . Se removi\u00f3 el par\u00e1metro tipo . Se modific\u00f3 el campo de respuesta altura a un objecto altura que contiene los valores valor y unidad. Se removieron los campos nombre y id , y se agregaron los nuevos campos objeto calle , calle_cruce_1 y calle_cruce_2 . Cada uno contiene los campos nombre , id y categoria , y representan las calles normalizadas que fueron detectadas en la direcci\u00f3n de entrada. Se agreg\u00f3 el campo piso . Se modificaron los nombres y el orden de los campos de respuesta en formato CSV. Cambios al recurso /provincias : Se agregaron los campos nombre_completo , iso_id , iso_nombre y categoria . Cambios al recurso /departamentos : Se agregaron los campos nombre_completo y categoria . Cambios al recurso /municipios : Se agregaron los campos nombre_completo y categoria . Par\u00e1metro interseccion : agrega calle como tipo de entidad posible a utilizar. Cambios al recurso /localidades : Se modific\u00f3 el nombre del campo tipo a categoria . Cambios al recurso /calles : Se modific\u00f3 el nombre del campo tipo a categoria . Se modific\u00f3 el nombre del par\u00e1metro tipo a categoria . Agrega par\u00e1metro interseccion : permite buscar calles por intersecci\u00f3n con geometr\u00edas de otras entidades. Cambios al recurso /ubicacion : Se removi\u00f3 el campo fuente , y se agregaron los campos provincia.fuente , departamento.fuente y municipio.fuente .","title":"0.3.0 - 2019/01/24"},{"location":"history/#023-20181211","text":"Modifica formato de respuestas CSV: todos los campos no-num\u00e9ricos ahora son devueltos entre comillas dobles. El cambio permite a algunas herramientas manejar mejor los valores de IDs, que consisten enteramente de d\u00edgitos, pero deber\u00edan ser tratados como texto. El par\u00e1metro 'direccion' del recurso /direcciones ahora acepta direcciones con altura 0. Mejora la fidelidad de resultados por en b\u00fasquedas por nombre: algunos t\u00e9rminos de b\u00fasqueda ahora excluyen a otros, aunque sean textualmente similares. Por ejemplo, buscar 'salta' no incluye resultados con 'santa', ya que los dos t\u00e9rminos refieren a entidades claramente distintas.","title":"0.2.3 - 2018/12/11"},{"location":"history/#022-20181105","text":"El par\u00e1metro 'direccion' del recurso /direcciones ahora acepta direcciones sin altura (por ejemplo, \"Avenida Santa Fe\"). Este cambio permite utilizar la versi\u00f3n POST del recurso con mayor facilidad, en caso de tener grandes cantidades de datos con y sin alturas en un mismo conjunto. Mejoras a mensajes de error para par\u00e1metros 'direccion' e 'interseccion'.","title":"0.2.2 - 2018/11/05"},{"location":"history/#021-20181025","text":"Actualiza proceso de indexaci\u00f3n para utilizar datos de ETL versi\u00f3n 6.0.0 . Agrega mensaje de error descriptivo para errores HTTP 405. Mejora par\u00e1metro 'campos': se permite especificar un prefixo para referirse a varios campos (por ejemplo, provincia para provincia.id y provincia.nombre ). Agrega par\u00e1metro interseccion . El mismo permite buscar provincias, departamentos y municipios utilizando intersecci\u00f3n de geometr\u00edas con otras entidades geogr\u00e1ficas. Se pueden buscar provincias por intersecci\u00f3n con municipios y departamentos. Se pueden buscar departamentos por intersecci\u00f3n con provincias y municipios. Se pueden buscar municipios por intersecci\u00f3n con provincias y departamentos. Agrega nuevo campo de datos provincia.interseccion a recursos /municipios y /departamentos . El campo especifica qu\u00e9 porcentaje del \u00e1rea de la provincia ocupa la entidad en s\u00ed. Agrega nuevos recursos de descarga de datos completos. Estos recursos permiten descargar la totalidad de los datos utilizados por cada recurso, en distintos formatos. Por ejemplo, para descargar los datos de provincias, se puede acceder a las siguientes URLs: https://apis.datos.gob.ar/georef/api/provincias.json https://apis.datos.gob.ar/georef/api/provincias.csv https://apis.datos.gob.ar/georef/api/provincias.geojson","title":"0.2.1 - 2018/10/25"},{"location":"history/#020-20180921","text":"Remueve campo 'departamento' de la entidad municipio. Esto se debe a que los departamentos no son padres jer\u00e1rquicos de los municipios. Agrega par\u00e1metro orden a recursos /calles y /direcciones . Agrega formato GeoJSON a recurso /direcciones . Agrega conjuntos de campos predefinidos al par\u00e1metro campos , los valores posibles son: basico estandar (utilizado por defecto) completo Mueve campo de respuestas fuente a conjunto completo . Permite el uso del par\u00e1metro aplanar en respuestas GeoJSON.","title":"0.2.0 - 2018/09/21"},{"location":"history/#016-20180907","text":"Actualiza proceso de indexaci\u00f3n para utilizar datos de ETL versi\u00f3n 4.0.0 . Modifica manejo de altura en recurso /direcciones . La nueva versi\u00f3n del recurso intenta ubicar altura dentro de los extremos de la calle tomando en consideraci\u00f3n que los datos pueden no siempre estar completos (o ser ideales). Este cambio tambi\u00e9n afecta la efectividad de la geolocalizaci\u00f3n de direcciones.","title":"0.1.6 - 2018/09/07"},{"location":"history/#015-20180904","text":"Mejora mensajes de errores para varios casos: Acceso a recursos inexistentes (por ejemplo: /provincia ). Valores inv\u00e1lidos para par\u00e1metros con elecci\u00f3n limitada de valores (por ejemplo, orden ). Listas de operaciones bulk inv\u00e1lidas. Direcciones de calles malformadas. Agrega API de paginado. Nuevo par\u00e1metro: inicio . Los resultados ahora incluyen tres metadatos: cantidad , total e inicio .","title":"0.1.5 - 2018/09/04"},{"location":"history/#014-20180823","text":"Se modific\u00f3 la interpretaci\u00f3n del par\u00e1metro direccion del recurso /direcciones : Se ignoran \u00edtems entre par\u00e9ntesis y ocurrencias de \"N\u00b0\" Se separa el texto utilizando \"-\", \",\" y \"B\u00b0\", y se intenta extraer una direcci\u00f3n (nombre + altura) de cada fragmento.","title":"0.1.4 - 2018/08/23"},{"location":"history/#013-20180821","text":"Se modificaron los siguientes campos: centroide_lat y centroide_lon ahora est\u00e1n anidados. Los campos altura_inicio_derecha , altura_fin_derecha , etc. ahora est\u00e1n anidados. Se agreg\u00f3 una validaci\u00f3n de valores repetidos para par\u00e1metro campos . El recurso /provincias ahora acepta el par\u00e1metro aplanar .","title":"0.1.3 - 2018/08/21"},{"location":"history/#012-20180816","text":"Se removi\u00f3 d como stopword en Elasticsearch.","title":"0.1.2 - 2018/08/16"},{"location":"history/#011-20180815","text":"Se modificaron los siguientes campos: lat ahora es centroide_lat . lon ahora es centroide_lon . Los campos inicio_derecha , fin_derecha , etc. ahora comienzan con altura_ .","title":"0.1.1 - 2018/08/15"},{"location":"history/#010-20180814","text":"Versi\u00f3n inicial.","title":"0.1.0 - 2018/08/14"},{"location":"jwt-token/","text":"Tokens JWT \u00b6 Si pertenec\u00e9s a un organismo de la Administraci\u00f3n P\u00fablica Nacional y quer\u00e9s incrementar la cuota de uso de la API de Georef, pod\u00e9s pedir un token y autenticarte utilizando JWT . Para generar un token JWT, se requieren dos elementos: una key y un secret generados para el uso con la API. Una vez obtenidos ambos elementos, se puede generar un token JWT utilizando, por ejemplo, Python o Node.js. A continuaci\u00f3n, se muestran ejemplos utilizando los siguientes valores demostrativos: key = YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk secret = dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq El algoritmo de autentificaci\u00f3n de mensajes con hash utilizado es HMAC-SHA256 ( HS256 ). Python \u00b6 Utilizando la librer\u00eda pyjwt : $ pip install pyjwt $ python >>> import jwt >>> key = 'YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk' >>> message = { 'iss': key } >>> secret = 'dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq' >>> token_bytes = jwt.encode(message, secret, algorithm='HS256') >>> token = token_bytes.decode() >>> token 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJZWE5rYzJSaGMyUm1ZWE5rWm1GelptUmhjMlJtWVhOayJ9.P4leoe9q_H3lmIlnpZuVFSt7ORgLhLfQ3JN_3FMexSo' Finalmente, para consumir la API de Georef, adjuntar el token generado en las cabeceras HTTP. A continuaci\u00f3n, se muestra un ejemplo utilizando la librer\u00eda requests : >>> import requests >>> headers = { 'Authorization': 'Bearer {}'.format(token) } >>> resp = requests.get('https://apis.datos.gob.ar/georef/api/provincias', headers=headers) >>> resp.json() { 'provincias': [ { ... } ] } Node.js \u00b6 Utilizando la librer\u00eda jswonwebtoken : $ npm install jsonwebtoken $ node > var jwt = require('jsonwebtoken') > var payload = { 'iss': 'YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk' } > var secret = 'dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq' > var token = jwt.sign(payload, secret, { 'noTimestamp': true }) > token 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJZWE5rYzJSaGMyUm1ZWE5rWm1GelptUmhjMlJtWVhOayJ9.P4leoe9q_H3lmIlnpZuVFSt7ORgLhLfQ3JN_3FMexSo' Finalmente, para consumir la API de Georef, adjuntar el token generado en las cabeceras HTTP: > var http = require('http') > http.get({ 'hostname': 'apis.datos.gob.ar', 'path': '/georef/api/provincias', 'headers': { 'authorization': 'Bearer ' + token } }, function(response) { ... })","title":"Autenticarse con JWT"},{"location":"jwt-token/#tokens-jwt","text":"Si pertenec\u00e9s a un organismo de la Administraci\u00f3n P\u00fablica Nacional y quer\u00e9s incrementar la cuota de uso de la API de Georef, pod\u00e9s pedir un token y autenticarte utilizando JWT . Para generar un token JWT, se requieren dos elementos: una key y un secret generados para el uso con la API. Una vez obtenidos ambos elementos, se puede generar un token JWT utilizando, por ejemplo, Python o Node.js. A continuaci\u00f3n, se muestran ejemplos utilizando los siguientes valores demostrativos: key = YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk secret = dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq El algoritmo de autentificaci\u00f3n de mensajes con hash utilizado es HMAC-SHA256 ( HS256 ).","title":"Tokens JWT"},{"location":"jwt-token/#python","text":"Utilizando la librer\u00eda pyjwt : $ pip install pyjwt $ python >>> import jwt >>> key = 'YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk' >>> message = { 'iss': key } >>> secret = 'dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq' >>> token_bytes = jwt.encode(message, secret, algorithm='HS256') >>> token = token_bytes.decode() >>> token 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJZWE5rYzJSaGMyUm1ZWE5rWm1GelptUmhjMlJtWVhOayJ9.P4leoe9q_H3lmIlnpZuVFSt7ORgLhLfQ3JN_3FMexSo' Finalmente, para consumir la API de Georef, adjuntar el token generado en las cabeceras HTTP. A continuaci\u00f3n, se muestra un ejemplo utilizando la librer\u00eda requests : >>> import requests >>> headers = { 'Authorization': 'Bearer {}'.format(token) } >>> resp = requests.get('https://apis.datos.gob.ar/georef/api/provincias', headers=headers) >>> resp.json() { 'provincias': [ { ... } ] }","title":"Python"},{"location":"jwt-token/#nodejs","text":"Utilizando la librer\u00eda jswonwebtoken : $ npm install jsonwebtoken $ node > var jwt = require('jsonwebtoken') > var payload = { 'iss': 'YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk' } > var secret = 'dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq' > var token = jwt.sign(payload, secret, { 'noTimestamp': true }) > token 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJZWE5rYzJSaGMyUm1ZWE5rWm1GelptUmhjMlJtWVhOayJ9.P4leoe9q_H3lmIlnpZuVFSt7ORgLhLfQ3JN_3FMexSo' Finalmente, para consumir la API de Georef, adjuntar el token generado en las cabeceras HTTP: > var http = require('http') > http.get({ 'hostname': 'apis.datos.gob.ar', 'path': '/georef/api/provincias', 'headers': { 'authorization': 'Bearer ' + token } }, function(response) { ... })","title":"Node.js"},{"location":"python-usage/","text":"Usar en Python \u00b6 Con requests \u00b6 Normalizar una entidad \u00b6 import requests import urllib API_BASE_URL = \"https://apis.datos.gob.ar/georef/api/\" def get_similar(endpoint, nombre, **kwargs): kwargs[\"nombre\"] = nombre url = \"{}{}?{}\".format(API_BASE_URL, endpoint, urllib.urlencode(kwargs)) return requests.get(url).json()[endpoint] provincias = get_similar(\"provincias\", \"San Juan\") [{ u'centroide': { u'lat': -30.865368, u'lon': -68.889491 }, u'id': u'70', u'nombre': u'San Juan' }] Normalizar varias entidades \u00b6 def get_similar_bulk(endpoint, nombres): \"\"\"Normaliza una lista de nombres de alguna de las entidades geogr\u00e1ficas.\"\"\" # realiza consulta a la API data = { endpoint: [ {\"nombre\": nombre, \"max\": 1} for nombre in nombres ]} url = API_BASE_URL + endpoint results = requests.post( url, json=data, headers={\"Content-Type\": \"application/json\"} ).json() # convierte a una lista de \"resultado m\u00e1s probable\" o \"vac\u00edo\" cuando no hay parsed_results = [ single_result[endpoint][0] if single_result[endpoint] else {} for single_result in results[\"resultados\"] ] return parsed_results provincias = get_similar_bulk(\"provincias\", [\"pxa\", \"sant fe\"]) [ {}, { u'centroide': { u'lat': -30.706927, u'lon': -60.949837 }, u'id': u'82', u'nombre': u'Santa Fe' } ] Enriquecer coordenadas con las unidades territoriales que las contienen \u00b6 def get_territorial_units(ubicaciones): \"\"\"Pide las unidades territoriales que contienen a c/punto de una lista de coordenadas.\"\"\" # realiza consulta a la API endpoint = \"ubicacion\" data = { \"ubicaciones\": [ {\"lat\": ubicacion[\"lat\"], \"lon\": ubicacion[\"lon\"], \"aplanar\": True} for ubicacion in ubicaciones ]} url = API_BASE_URL + endpoint results = requests.post( url, json=data, headers={\"Content-Type\": \"application/json\"} ).json() # convierte a una lista de \"resultado m\u00e1s probable\" o \"vac\u00edo\" cuando no hay parsed_results = [ single_result[endpoint] if single_result[endpoint] else {} for single_result in results[\"resultados\"] ] return parsed_results ubicaciones = get_territorial_units([ {\"lat\": -32.9477132, \"lon\": -60.6304658}, {\"lat\": -34.6037389, \"lon\": -58.3815704} ]) [ { u'departamento_id': u'30105', u'departamento_nombre': u'Victoria', u'lat': -32.9477132, u'lon': -60.6304658, u'municipio_id': u'82210', u'municipio_nombre': u'Rosario', u'provincia_id': u'30', u'provincia_nombre': u'Entre R\u00edos' }, { u'departamento_id': u'02007', u'departamento_nombre': u'Comuna 1', u'lat': -34.6037389, u'lon': -58.3815704, u'municipio_id': None, u'municipio_nombre': None, u'provincia_id': u'02', u'provincia_nombre': u'Ciudad Aut\u00f3noma de Buenos Aires' } ] Con pandas \u00b6 Consultar listas de referencia \u00b6 Todas las consultas a la API en formato CSV, se pueden leer f\u00e1cilmente a un pandas.DataFrame . De ah\u00ed se pueden tomar listas de referencia para distintas unidades territoriales. import pandas as pd provincias = pd.read_csv(\"https://apis.datos.gob.ar/georef/api/provincias?formato=csv\") provincia_id provincia_nombre 14 C\u00f3rdoba 22 Chaco 26 Chubut 6 Buenos Aires 10 Catamarca 30 Entre R\u00edos 34 Formosa 42 La Pampa 62 R\u00edo Negro 70 San Juan 78 Santa Cruz 82 Santa Fe 94 Tierra del Fuego, Ant\u00e1rtida e Islas del Atl\u00e1nt... 38 Jujuy 54 Misiones 2 Ciudad Aut\u00f3noma de Buenos Aires 18 Corrientes 46 La Rioja 66 Salta 86 Santiago del Estero 50 Mendoza 58 Neuqu\u00e9n 74 San Luis 90 Tucum\u00e1n Enriquecer coordenadas \u00b6 def add_territorial_units(df, column_lat, column_lon): \"\"\"Agrega unidades territoriales que contienen coordenadas a un DataFrame. Args: df (pandas.DataFrame): Un DataFrame que tiene coordenadas. column_lat (str): Nombre de la columna que tiene latitud. column_lon (str): Nombre de la columna que tiene longitud. Returns: pandas.DataFrame: DataFrame original aumentado con unidades territoriales que contienen a las coordenadas. \"\"\" # toma una lista de coordenadas \u00fanicas (no repetidas) coordinates = df[[column_lon, column_lat]].rename( columns={column_lon: \"lon\", column_lat: \"lat\"} ).drop_duplicates().to_dict(\"records\") # crea DataFrame de unidades territoriales que contienen a las coordenadas ubicaciones = pd.DataFrame(get_territorial_units(coordinates)) # agrega las unidades territoriales al DataFrame original df_with_territorial_units = df.merge( ubicaciones, \"left\", left_on=[column_lon, column_lat], right_on=[\"lon\", \"lat\"] ) # elimina columnas de coordenadas repetidas, dejando las originales return df_with_territorial_units.drop([\"lon\", \"lat\"], axis=1) # descarga un CSV con coordenadas de aeropuertos df = pd.read_csv(\"https://servicios.transporte.gob.ar/gobierno_abierto/descargar.php?t=aeropuertos&d=detalle\", sep=\";\") # Agrega unidades territoriales que contienen coordenadas a un DataFrame df_with_territorial_units = add_territorial_units(df, \"longitud\", \"latitud\") tipo denominacion latitud longitud elev \\ Aer\u00f3dromo CORONEL BOGADO/AGROSERVICIOS -60.57066 -33.27226 44.0 Aer\u00f3dromo GENERAL ACHA -64.61351 -37.40164 277.0 Aer\u00f3dromo ARRECIFES/LA CURA MALAL -60.14170 -34.07574 37.0 Aer\u00f3dromo PUERTO DESEADO -65.90410 -47.73511 82.0 Aer\u00f3dromo BANDERA/AGROSERVICIOS DO\u00d1A TERESA -62.26462 -28.85541 75.0 departamento_id departamento_nombre municipio_id municipio_nombre \\ 82084 Rosario 823393 Coronel Bogado 42154 Utrac\u00e1n 420133 General Acha 06077 Arrecifes 060077 Arrecifes 78014 Deseado None None 86077 General Taboada None None provincia_id provincia_nombre 82 Santa Fe 42 La Pampa 06 Buenos Aires 78 Santa Cruz 86 Santiago del Estero","title":"Usar en Python"},{"location":"python-usage/#usar-en-python","text":"","title":"Usar en Python"},{"location":"python-usage/#con-requests","text":"","title":"Con requests"},{"location":"python-usage/#normalizar-una-entidad","text":"import requests import urllib API_BASE_URL = \"https://apis.datos.gob.ar/georef/api/\" def get_similar(endpoint, nombre, **kwargs): kwargs[\"nombre\"] = nombre url = \"{}{}?{}\".format(API_BASE_URL, endpoint, urllib.urlencode(kwargs)) return requests.get(url).json()[endpoint] provincias = get_similar(\"provincias\", \"San Juan\") [{ u'centroide': { u'lat': -30.865368, u'lon': -68.889491 }, u'id': u'70', u'nombre': u'San Juan' }]","title":"Normalizar una entidad"},{"location":"python-usage/#normalizar-varias-entidades","text":"def get_similar_bulk(endpoint, nombres): \"\"\"Normaliza una lista de nombres de alguna de las entidades geogr\u00e1ficas.\"\"\" # realiza consulta a la API data = { endpoint: [ {\"nombre\": nombre, \"max\": 1} for nombre in nombres ]} url = API_BASE_URL + endpoint results = requests.post( url, json=data, headers={\"Content-Type\": \"application/json\"} ).json() # convierte a una lista de \"resultado m\u00e1s probable\" o \"vac\u00edo\" cuando no hay parsed_results = [ single_result[endpoint][0] if single_result[endpoint] else {} for single_result in results[\"resultados\"] ] return parsed_results provincias = get_similar_bulk(\"provincias\", [\"pxa\", \"sant fe\"]) [ {}, { u'centroide': { u'lat': -30.706927, u'lon': -60.949837 }, u'id': u'82', u'nombre': u'Santa Fe' } ]","title":"Normalizar varias entidades"},{"location":"python-usage/#enriquecer-coordenadas-con-las-unidades-territoriales-que-las-contienen","text":"def get_territorial_units(ubicaciones): \"\"\"Pide las unidades territoriales que contienen a c/punto de una lista de coordenadas.\"\"\" # realiza consulta a la API endpoint = \"ubicacion\" data = { \"ubicaciones\": [ {\"lat\": ubicacion[\"lat\"], \"lon\": ubicacion[\"lon\"], \"aplanar\": True} for ubicacion in ubicaciones ]} url = API_BASE_URL + endpoint results = requests.post( url, json=data, headers={\"Content-Type\": \"application/json\"} ).json() # convierte a una lista de \"resultado m\u00e1s probable\" o \"vac\u00edo\" cuando no hay parsed_results = [ single_result[endpoint] if single_result[endpoint] else {} for single_result in results[\"resultados\"] ] return parsed_results ubicaciones = get_territorial_units([ {\"lat\": -32.9477132, \"lon\": -60.6304658}, {\"lat\": -34.6037389, \"lon\": -58.3815704} ]) [ { u'departamento_id': u'30105', u'departamento_nombre': u'Victoria', u'lat': -32.9477132, u'lon': -60.6304658, u'municipio_id': u'82210', u'municipio_nombre': u'Rosario', u'provincia_id': u'30', u'provincia_nombre': u'Entre R\u00edos' }, { u'departamento_id': u'02007', u'departamento_nombre': u'Comuna 1', u'lat': -34.6037389, u'lon': -58.3815704, u'municipio_id': None, u'municipio_nombre': None, u'provincia_id': u'02', u'provincia_nombre': u'Ciudad Aut\u00f3noma de Buenos Aires' } ]","title":"Enriquecer coordenadas con las unidades territoriales que las contienen"},{"location":"python-usage/#con-pandas","text":"","title":"Con pandas"},{"location":"python-usage/#consultar-listas-de-referencia","text":"Todas las consultas a la API en formato CSV, se pueden leer f\u00e1cilmente a un pandas.DataFrame . De ah\u00ed se pueden tomar listas de referencia para distintas unidades territoriales. import pandas as pd provincias = pd.read_csv(\"https://apis.datos.gob.ar/georef/api/provincias?formato=csv\") provincia_id provincia_nombre 14 C\u00f3rdoba 22 Chaco 26 Chubut 6 Buenos Aires 10 Catamarca 30 Entre R\u00edos 34 Formosa 42 La Pampa 62 R\u00edo Negro 70 San Juan 78 Santa Cruz 82 Santa Fe 94 Tierra del Fuego, Ant\u00e1rtida e Islas del Atl\u00e1nt... 38 Jujuy 54 Misiones 2 Ciudad Aut\u00f3noma de Buenos Aires 18 Corrientes 46 La Rioja 66 Salta 86 Santiago del Estero 50 Mendoza 58 Neuqu\u00e9n 74 San Luis 90 Tucum\u00e1n","title":"Consultar listas de referencia"},{"location":"python-usage/#enriquecer-coordenadas","text":"def add_territorial_units(df, column_lat, column_lon): \"\"\"Agrega unidades territoriales que contienen coordenadas a un DataFrame. Args: df (pandas.DataFrame): Un DataFrame que tiene coordenadas. column_lat (str): Nombre de la columna que tiene latitud. column_lon (str): Nombre de la columna que tiene longitud. Returns: pandas.DataFrame: DataFrame original aumentado con unidades territoriales que contienen a las coordenadas. \"\"\" # toma una lista de coordenadas \u00fanicas (no repetidas) coordinates = df[[column_lon, column_lat]].rename( columns={column_lon: \"lon\", column_lat: \"lat\"} ).drop_duplicates().to_dict(\"records\") # crea DataFrame de unidades territoriales que contienen a las coordenadas ubicaciones = pd.DataFrame(get_territorial_units(coordinates)) # agrega las unidades territoriales al DataFrame original df_with_territorial_units = df.merge( ubicaciones, \"left\", left_on=[column_lon, column_lat], right_on=[\"lon\", \"lat\"] ) # elimina columnas de coordenadas repetidas, dejando las originales return df_with_territorial_units.drop([\"lon\", \"lat\"], axis=1) # descarga un CSV con coordenadas de aeropuertos df = pd.read_csv(\"https://servicios.transporte.gob.ar/gobierno_abierto/descargar.php?t=aeropuertos&d=detalle\", sep=\";\") # Agrega unidades territoriales que contienen coordenadas a un DataFrame df_with_territorial_units = add_territorial_units(df, \"longitud\", \"latitud\") tipo denominacion latitud longitud elev \\ Aer\u00f3dromo CORONEL BOGADO/AGROSERVICIOS -60.57066 -33.27226 44.0 Aer\u00f3dromo GENERAL ACHA -64.61351 -37.40164 277.0 Aer\u00f3dromo ARRECIFES/LA CURA MALAL -60.14170 -34.07574 37.0 Aer\u00f3dromo PUERTO DESEADO -65.90410 -47.73511 82.0 Aer\u00f3dromo BANDERA/AGROSERVICIOS DO\u00d1A TERESA -62.26462 -28.85541 75.0 departamento_id departamento_nombre municipio_id municipio_nombre \\ 82084 Rosario 823393 Coronel Bogado 42154 Utrac\u00e1n 420133 General Acha 06077 Arrecifes 060077 Arrecifes 78014 Deseado None None 86077 General Taboada None None provincia_id provincia_nombre 82 Santa Fe 42 La Pampa 06 Buenos Aires 78 Santa Cruz 86 Santiago del Estero","title":"Enriquecer coordenadas"},{"location":"python3.6/","text":"Instalaci\u00f3n de Python 3.6 \u00b6 Para instalar Python 3.6 en entornos GNU/Linux, se puede utilizar la herramienta pyenv disponible en GitHub . pyenv permite al usuario instalar cualquier versi\u00f3n de Python existente, e incluso tener varias versiones instaladas simult\u00e1neamente. A continuaci\u00f3n, se detallan los pasos necesarios para instalar Python 3.6. Los mismos fueron creados utilizando Ubuntu 16.04. 1. Descargar pyenv \u00b6 Clonar el repositorio de pyenv en el directorio ~/.pyenv : $ git clone https://github.com/pyenv/pyenv.git ~/.pyenv 2. Agregar configuraci\u00f3n de pyenv a ~/.bashrc \u00b6 $ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bashrc 3. Activar la nueva configuraci\u00f3n \u00b6 $ source ~/.bashrc 4. Instalar dependencias para compilar Python \u00b6 $ sudo apt install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev 5. Descargar, compilar e instalar Python 3.6 \u00b6 $ pyenv install 3.6.5 6. Activar Python 3.6 \u00b6 Una vez instalado Python 3.6, se debe activar su uso. pyenv permite establecer versiones de Python por directorio: de esta forma, es posible clonar el repositorio georef-ar-api en una ubicaci\u00f3n, y activar el uso de Python 3.6 en la misma: $ git clone https://github.com/datosgobar/georef-ar-api.git $ cd georef-ar-api $ pyenv version 3.6.5 # activar el uso de Python 3.6 $ python --version # el comando 'python' ahora utiliza Python 3.6, en este directorio Python 3.6.5 $ pip --version # tambi\u00e9n se instala 'pip' autom\u00e1ticamente pip 9.0.1 (python 3.6.5) Notar que pyenv crea un archivo llamado .python-version , donde se especifica la versi\u00f3n de Python que deber\u00eda ser utilizada en el directorio.","title":"Instalaci\u00f3n de Python 3.6"},{"location":"python3.6/#instalacion-de-python-36","text":"Para instalar Python 3.6 en entornos GNU/Linux, se puede utilizar la herramienta pyenv disponible en GitHub . pyenv permite al usuario instalar cualquier versi\u00f3n de Python existente, e incluso tener varias versiones instaladas simult\u00e1neamente. A continuaci\u00f3n, se detallan los pasos necesarios para instalar Python 3.6. Los mismos fueron creados utilizando Ubuntu 16.04.","title":"Instalaci\u00f3n de Python 3.6"},{"location":"python3.6/#1-descargar-pyenv","text":"Clonar el repositorio de pyenv en el directorio ~/.pyenv : $ git clone https://github.com/pyenv/pyenv.git ~/.pyenv","title":"1. Descargar pyenv"},{"location":"python3.6/#2-agregar-configuracion-de-pyenv-a-bashrc","text":"$ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bashrc","title":"2. Agregar configuraci\u00f3n de pyenv a ~/.bashrc"},{"location":"python3.6/#3-activar-la-nueva-configuracion","text":"$ source ~/.bashrc","title":"3. Activar la nueva configuraci\u00f3n"},{"location":"python3.6/#4-instalar-dependencias-para-compilar-python","text":"$ sudo apt install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev","title":"4. Instalar dependencias para compilar Python"},{"location":"python3.6/#5-descargar-compilar-e-instalar-python-36","text":"$ pyenv install 3.6.5","title":"5. Descargar, compilar e instalar Python 3.6"},{"location":"python3.6/#6-activar-python-36","text":"Una vez instalado Python 3.6, se debe activar su uso. pyenv permite establecer versiones de Python por directorio: de esta forma, es posible clonar el repositorio georef-ar-api en una ubicaci\u00f3n, y activar el uso de Python 3.6 en la misma: $ git clone https://github.com/datosgobar/georef-ar-api.git $ cd georef-ar-api $ pyenv version 3.6.5 # activar el uso de Python 3.6 $ python --version # el comando 'python' ahora utiliza Python 3.6, en este directorio Python 3.6.5 $ pip --version # tambi\u00e9n se instala 'pip' autom\u00e1ticamente pip 9.0.1 (python 3.6.5) Notar que pyenv crea un archivo llamado .python-version , donde se especifica la versi\u00f3n de Python que deber\u00eda ser utilizada en el directorio.","title":"6. Activar Python 3.6"},{"location":"quick-start/","text":"Ejemplos de uso \u00b6 Ejemplos r\u00e1pidos \u00b6 A continuaci\u00f3n, se muestran algunos ejemplos de uso de la API, utilizando los recursos GET : B\u00fasqueda de provincias \u00b6 GET https://apis.datos.gob.ar/georef/api/provincias?nombre=cordoba { \"provincias\": [ { \"id\": \"14\", \"centroide\": { \"lat\": -32.142933, \"lon\": -63.801753 }, \"nombre\": \"C\u00d3RDOBA\" } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 } B\u00fasqueda de departamentos \u00b6 GET https://apis.datos.gob.ar/georef/api/departamentos?provincia=jujuy&max=16 { \"departamentos\": [ { \"id\": \"38042\", \"centroide\": { \"lat\": -24.194923, \"lon\": -65.12645 }, \"nombre\": \"PALPAL\u00c1\", \"provincia\": { \"id\": \"38\", \"nombre\": \"JUJUY\" } }, { ... } // 15 departamentos omitidos ], \"cantidad\": 16, \"total\": 16, \"inicio\": 0 } B\u00fasqueda de municipios \u00b6 GET https://apis.datos.gob.ar/georef/api/municipios?provincia=tucuman&aplanar { \"municipios\": [ { \"centroide_lat\": -27.816619, \"centroide_lon\": -65.199594, \"id\": \"908210\", \"nombre\": \"Taco Ralo\", \"provincia_id\": \"90\", \"provincia_nombre\": \"Tucum\u00e1n\" }, { ... } // 9 municipios omitidos ], \"cantidad\": 10, \"total\": 112, \"inicio\": 0 } B\u00fasqueda de localidades \u00b6 GET https://apis.datos.gob.ar/georef/api/localidades?provincia=chubut&campos=nombre { \"localidades\": [ { \"id\": \"26007030000\", \"nombre\": \"PUERTO PIRAMIDE\" }, { ... } // 9 resultados omitidos ], \"cantidad\": 10, \"total\": 90, \"inicio\": 0 } Normalizaci\u00f3n de direcciones \u00b6 GET https://apis.datos.gob.ar/georef/api/direcciones?departamento=merlo&direccion=Florida al 1801 { \"direcciones\": [ { \"altura\": { \"unidad\": null, \"valor\": \"1801\" }, \"calle\": { \"categoria\": \"CALLE\", \"id\": \"0653901003005\", \"nombre\": \"FLORIDA\" }, \"calle_cruce_1\": { \"categoria\": null, \"id\": null, \"nombre\": null }, \"calle_cruce_2\": { \"categoria\": null, \"id\": null, \"nombre\": null }, \"departamento\": { \"id\": \"06539\", \"nombre\": \"Merlo\" }, \"nomenclatura\": \"FLORIDA 1801, Merlo, Buenos Aires\", \"piso\": null, \"provincia\": { \"id\": \"06\", \"nombre\": \"Buenos Aires\" }, \"ubicacion\": { \"lat\": null, \"lon\": null } } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 } Listado de calles \u00b6 GET https://apis.datos.gob.ar/georef/api/calles?departamento=rio chico&categoria=avenida { \"calles\": [ { \"altura\": { \"fin\": { \"derecha\": 0, \"izquierda\": 0 }, \"inicio\": { \"derecha\": 0, \"izquierda\": 0 } }, \"departamento\": { \"id\": \"90077\", \"nombre\": \"R\u00edo Chico\" }, \"id\": \"9007701000050\", \"nombre\": \"AV GRL SAVIO\", \"nomenclatura\": \"AV GRL SAVIO, R\u00edo Chico, Tucum\u00e1n\", \"provincia\": { \"id\": \"90\", \"nombre\": \"Tucum\u00e1n\" }, \"categoria\": \"AV\" }, { ... } // 2 resultados omitidos ], \"cantidad\": 3, \"total\": 3, \"inicio\": 0 }","title":"Ejemplos de uso"},{"location":"quick-start/#ejemplos-de-uso","text":"","title":"Ejemplos de uso"},{"location":"quick-start/#ejemplos-rapidos","text":"A continuaci\u00f3n, se muestran algunos ejemplos de uso de la API, utilizando los recursos GET :","title":"Ejemplos r\u00e1pidos"},{"location":"quick-start/#busqueda-de-provincias","text":"GET https://apis.datos.gob.ar/georef/api/provincias?nombre=cordoba { \"provincias\": [ { \"id\": \"14\", \"centroide\": { \"lat\": -32.142933, \"lon\": -63.801753 }, \"nombre\": \"C\u00d3RDOBA\" } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 }","title":"B\u00fasqueda de provincias"},{"location":"quick-start/#busqueda-de-departamentos","text":"GET https://apis.datos.gob.ar/georef/api/departamentos?provincia=jujuy&max=16 { \"departamentos\": [ { \"id\": \"38042\", \"centroide\": { \"lat\": -24.194923, \"lon\": -65.12645 }, \"nombre\": \"PALPAL\u00c1\", \"provincia\": { \"id\": \"38\", \"nombre\": \"JUJUY\" } }, { ... } // 15 departamentos omitidos ], \"cantidad\": 16, \"total\": 16, \"inicio\": 0 }","title":"B\u00fasqueda de departamentos"},{"location":"quick-start/#busqueda-de-municipios","text":"GET https://apis.datos.gob.ar/georef/api/municipios?provincia=tucuman&aplanar { \"municipios\": [ { \"centroide_lat\": -27.816619, \"centroide_lon\": -65.199594, \"id\": \"908210\", \"nombre\": \"Taco Ralo\", \"provincia_id\": \"90\", \"provincia_nombre\": \"Tucum\u00e1n\" }, { ... } // 9 municipios omitidos ], \"cantidad\": 10, \"total\": 112, \"inicio\": 0 }","title":"B\u00fasqueda de municipios"},{"location":"quick-start/#busqueda-de-localidades","text":"GET https://apis.datos.gob.ar/georef/api/localidades?provincia=chubut&campos=nombre { \"localidades\": [ { \"id\": \"26007030000\", \"nombre\": \"PUERTO PIRAMIDE\" }, { ... } // 9 resultados omitidos ], \"cantidad\": 10, \"total\": 90, \"inicio\": 0 }","title":"B\u00fasqueda de localidades"},{"location":"quick-start/#normalizacion-de-direcciones","text":"GET https://apis.datos.gob.ar/georef/api/direcciones?departamento=merlo&direccion=Florida al 1801 { \"direcciones\": [ { \"altura\": { \"unidad\": null, \"valor\": \"1801\" }, \"calle\": { \"categoria\": \"CALLE\", \"id\": \"0653901003005\", \"nombre\": \"FLORIDA\" }, \"calle_cruce_1\": { \"categoria\": null, \"id\": null, \"nombre\": null }, \"calle_cruce_2\": { \"categoria\": null, \"id\": null, \"nombre\": null }, \"departamento\": { \"id\": \"06539\", \"nombre\": \"Merlo\" }, \"nomenclatura\": \"FLORIDA 1801, Merlo, Buenos Aires\", \"piso\": null, \"provincia\": { \"id\": \"06\", \"nombre\": \"Buenos Aires\" }, \"ubicacion\": { \"lat\": null, \"lon\": null } } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 }","title":"Normalizaci\u00f3n de direcciones"},{"location":"quick-start/#listado-de-calles","text":"GET https://apis.datos.gob.ar/georef/api/calles?departamento=rio chico&categoria=avenida { \"calles\": [ { \"altura\": { \"fin\": { \"derecha\": 0, \"izquierda\": 0 }, \"inicio\": { \"derecha\": 0, \"izquierda\": 0 } }, \"departamento\": { \"id\": \"90077\", \"nombre\": \"R\u00edo Chico\" }, \"id\": \"9007701000050\", \"nombre\": \"AV GRL SAVIO\", \"nomenclatura\": \"AV GRL SAVIO, R\u00edo Chico, Tucum\u00e1n\", \"provincia\": { \"id\": \"90\", \"nombre\": \"Tucum\u00e1n\" }, \"categoria\": \"AV\" }, { ... } // 2 resultados omitidos ], \"cantidad\": 3, \"total\": 3, \"inicio\": 0 }","title":"Listado de calles"},{"location":"shapefiles/","text":"Descarga de Geometr\u00edas \u00b6 La API permite la descarga de geometr\u00edas a trav\u00e9s del formato ESRI Shapefile . Para utilizar el formato, se debe agregar formato=shp a la lista de par\u00e1metros especificados en la URL. El formato Shapefile est\u00e1 disponible en los siguientes recursos (versi\u00f3n GET): /provincias /departamentos /municipios /localidades /calles Cuando se especifica formato=shp , la respuesta de la API es un archivo ZIP que contiene los tres archivos requeridos por el est\u00e1ndar: .shp , .shx y .dbf . El archivo luego puede ser abierto con programas como QGIS . El sistema de coordenadas de las geometr\u00edas descargadas es WGS84 (EPSG 4326). Por ejemplo, si se desea obtener todas las calles del municipio Alta Garc\u00eda (ID 141372), se puede utilizar la siguiente consulta: GET https://apis.datos.gob.ar/georef/api/calles?interseccion=municipio:141372&formato=shp&max=1000 Que descargar\u00eda los siguientes datos: Si se desean descargar todos los departamentos de la provicina de Chaco, se puede utilizar la siguiente consulta: GET https://apis.datos.gob.ar/georef/api/departamentos?provincia=chaco&formato=shp&max=1000 Que descargar\u00eda los siguientes datos:","title":"Descarga de geometr\u00edas"},{"location":"shapefiles/#descarga-de-geometrias","text":"La API permite la descarga de geometr\u00edas a trav\u00e9s del formato ESRI Shapefile . Para utilizar el formato, se debe agregar formato=shp a la lista de par\u00e1metros especificados en la URL. El formato Shapefile est\u00e1 disponible en los siguientes recursos (versi\u00f3n GET): /provincias /departamentos /municipios /localidades /calles Cuando se especifica formato=shp , la respuesta de la API es un archivo ZIP que contiene los tres archivos requeridos por el est\u00e1ndar: .shp , .shx y .dbf . El archivo luego puede ser abierto con programas como QGIS . El sistema de coordenadas de las geometr\u00edas descargadas es WGS84 (EPSG 4326). Por ejemplo, si se desea obtener todas las calles del municipio Alta Garc\u00eda (ID 141372), se puede utilizar la siguiente consulta: GET https://apis.datos.gob.ar/georef/api/calles?interseccion=municipio:141372&formato=shp&max=1000 Que descargar\u00eda los siguientes datos: Si se desean descargar todos los departamentos de la provicina de Chaco, se puede utilizar la siguiente consulta: GET https://apis.datos.gob.ar/georef/api/departamentos?provincia=chaco&formato=shp&max=1000 Que descargar\u00eda los siguientes datos:","title":"Descarga de Geometr\u00edas"},{"location":"spreadsheet-integration/","text":"Integraci\u00f3n con planillas de c\u00e1lculo \u00b6 Google Drive \u00b6 1. Modificar la configuraci\u00f3n regional \u00b6 La API genera archivos CSV usando \u201c.\u201d como separador decimal. Para que Google Spreadsheet lea correctamente el archivo debe elegirse \u201cEstados Unidos\u201d o cualquier otra regi\u00f3n compatible (esto s\u00f3lo afecta a la lectura de coordenadas). 2. Importar listados de unidades territoriales \u00b6 Utilizamos la funci\u00f3n IMPORTDATA() de Google Sheets y armamos la url de la entidad territorial que queremos importar. Por ejemplo \"localidades de la provincia de Santa F\u00e9\": https://apis.datos.gob.ar/georef/api/localidades?formato=csv&max=1000&provincia=santa%20fe y obtendremos: 3. Normalizar un listado de unidades territoriales \u00b6 Si tenemos un listado de provincias que queremos normalizar, como el siguiente: Podemos armar urls individuales para normalizar los nombres y traer alguno de sus atributos. Imaginemos que queremos el ID y el nombre normalizado. Primero generamos la url para cada una de las provincias: y luego necesitamos importar una nueva funci\u00f3n en la hoja de c\u00e1lculo. Para eso, desde el men\u00fa: Herramientas \u2192 Editor de secuencia de comandos. Borramos todo lo que hay en el editor y pegamos el siguiente script de Bradjasper . Renombremos el script como ImportJson.gs y guardamos. Ahora ya podemos usar la funci\u00f3n =importJSON() en una celda. =ImportJSON(B2;\u201d/provincias/id,/provincias/nombre\u201d;\u201dnoInherit,noTruncate,noHeaders\u201d) y obtendremos:","title":"Usar en planillas de c\u00e1lculo"},{"location":"spreadsheet-integration/#integracion-con-planillas-de-calculo","text":"","title":"Integraci\u00f3n con planillas de c\u00e1lculo"},{"location":"spreadsheet-integration/#google-drive","text":"","title":"Google Drive"},{"location":"spreadsheet-integration/#1-modificar-la-configuracion-regional","text":"La API genera archivos CSV usando \u201c.\u201d como separador decimal. Para que Google Spreadsheet lea correctamente el archivo debe elegirse \u201cEstados Unidos\u201d o cualquier otra regi\u00f3n compatible (esto s\u00f3lo afecta a la lectura de coordenadas).","title":"1. Modificar la configuraci\u00f3n regional"},{"location":"spreadsheet-integration/#2-importar-listados-de-unidades-territoriales","text":"Utilizamos la funci\u00f3n IMPORTDATA() de Google Sheets y armamos la url de la entidad territorial que queremos importar. Por ejemplo \"localidades de la provincia de Santa F\u00e9\": https://apis.datos.gob.ar/georef/api/localidades?formato=csv&max=1000&provincia=santa%20fe y obtendremos:","title":"2. Importar listados de unidades territoriales"},{"location":"spreadsheet-integration/#3-normalizar-un-listado-de-unidades-territoriales","text":"Si tenemos un listado de provincias que queremos normalizar, como el siguiente: Podemos armar urls individuales para normalizar los nombres y traer alguno de sus atributos. Imaginemos que queremos el ID y el nombre normalizado. Primero generamos la url para cada una de las provincias: y luego necesitamos importar una nueva funci\u00f3n en la hoja de c\u00e1lculo. Para eso, desde el men\u00fa: Herramientas \u2192 Editor de secuencia de comandos. Borramos todo lo que hay en el editor y pegamos el siguiente script de Bradjasper . Renombremos el script como ImportJson.gs y guardamos. Ahora ya podemos usar la funci\u00f3n =importJSON() en una celda. =ImportJSON(B2;\u201d/provincias/id,/provincias/nombre\u201d;\u201dnoInherit,noTruncate,noHeaders\u201d) y obtendremos:","title":"3. Normalizar un listado de unidades territoriales"},{"location":"terms/","text":"Condiciones de uso \u00b6 Legales \u00b6 Los datos del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos de Argentina se disponibilizan bajo la licencia Creative Commons Attribution 4.0 y pueden ser usados para cualquier fin, incluyendo fines comerciales. T\u00e9cnicas \u00b6 La API del servicio de normalizaci\u00f3n se encuentra en estado alpha de desarrollo y las cuotas de uso abierto sin autenticaci\u00f3n no est\u00e1n definidas. A medida que el servicio madure en su desarrollo y en el uso que se le da, se establecer\u00e1n cuotas expl\u00edcitas de uso sin autenticaci\u00f3n por IP. Los organismos de la APN que requieran cuotas de uso m\u00e1s elevadas que las del servicio abierto, pueden solicitar un token a datos@modernizacion.gob.ar .","title":"Condiciones de uso"},{"location":"terms/#condiciones-de-uso","text":"","title":"Condiciones de uso"},{"location":"terms/#legales","text":"Los datos del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos de Argentina se disponibilizan bajo la licencia Creative Commons Attribution 4.0 y pueden ser usados para cualquier fin, incluyendo fines comerciales.","title":"Legales"},{"location":"terms/#tecnicas","text":"La API del servicio de normalizaci\u00f3n se encuentra en estado alpha de desarrollo y las cuotas de uso abierto sin autenticaci\u00f3n no est\u00e1n definidas. A medida que el servicio madure en su desarrollo y en el uso que se le da, se establecer\u00e1n cuotas expl\u00edcitas de uso sin autenticaci\u00f3n por IP. Los organismos de la APN que requieran cuotas de uso m\u00e1s elevadas que las del servicio abierto, pueden solicitar un token a datos@modernizacion.gob.ar .","title":"T\u00e9cnicas"}]}