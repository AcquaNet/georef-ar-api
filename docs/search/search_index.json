{"config":{"lang":["es"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos de Argentina \u00b6 La API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos, permite normalizar y codificar los nombres de unidades territoriales de la Argentina (provincias, departamentos, municipios y localidades) y de sus calles, as\u00ed como ubicar coordenadas dentro de ellas. Las unidades territoriales tienen nombres y c\u00f3digos oficiales. Cuando no se usan, los datos son dif\u00edciles de cruzar entre s\u00ed y hay que normalizarlos antes. provincia Santiago del Estero Stgo. del Estero S. del Estero Sgo. del Estero GET https://apis.datos.gob.ar/georef/api/provincias?nombre=Sgo.%20del%20Estero { \"provincias\": [ { \"nombre\": \"Santiago del Estero\", \"id\": \"86\", \"fuente\": \"IGN\", \"centroide\": { \"lat\": -27.782412, \"lon\": -63.252387 } } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 } Cuando un conjunto de datos tiene puntos de coordenadas dentro de Argentina, puede cruzarse con muchos datos m\u00e1s, relacionados a las unidades territoriales que lo contienen. Para esto hay que agregarlas a los datos originales. lat lon -27.2741 -66.7529 -34.603633 -58.3837587 GET https://apis.datos.gob.ar/georef/api/ubicacion?lat=-27.2741&lon=-66.7529 { \"ubicacion\": { \"departamento\": { \"id\": \"10035\", \"nombre\": \"Bel\u00e9n\" }, \"fuente\": \"IGN\", \"lat\": -27.2741, \"lon\": -66.7529, \"municipio\": { \"id\": \"100077\", \"nombre\": \"Hualf\u00edn\" }, \"provincia\": { \"id\": \"10\", \"nombre\": \"Catamarca\" } } } Finalmente, se puede utilizar la API como punto de referencia al momento de crear datos que est\u00e9n vinculados a datos geogr\u00e1ficos. Por ejemplo, si se cuenta con un formulario en el que se debe mostrar a un usuario un listado de provincias, y luego un listado de municipios a partir de la provincia seleccionada, se podr\u00edan ejecutar las siguientes consultas: Listar las provincias de la Rep\u00fablica Argentina: GET https://apis.datos.gob.ar/georef/api/provincias?campos=id,nombre { \"provincias\": [ { \"nombre\": \"Chaco\", \"id\": \"22\", \"fuente\": \"IGN\" }, { ... } // 23 resultados omitidos ], \"cantidad\": 24, \"total\": 24, \"inicio\": 0 } Asumiendo que el usuario selecciona Chaco (ID: 22 ), se ejecutar\u00eda la siguiente consulta para obtener el listado de municipios: GET https://apis.datos.gob.ar/georef/api/municipios?provincia=22&campos=id,nombre&max=100 { \"municipios\": [ { \"nombre\": \"Makall\u00e9\", \"id\": \"220161\", \"fuente\": \"IGN\" }, { ... } // 67 resultados omitidos ], \"cantidad\": 68, \"total\": 68, \"inicio\": 0 } Notar que al ser datos que no son modificados regularmente, es posible retener copias de los mismos para ser reutilizados en el futuro.","title":"Inicio"},{"location":"#api-del-servicio-de-normalizacion-de-datos-geograficos-de-argentina","text":"La API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos, permite normalizar y codificar los nombres de unidades territoriales de la Argentina (provincias, departamentos, municipios y localidades) y de sus calles, as\u00ed como ubicar coordenadas dentro de ellas. Las unidades territoriales tienen nombres y c\u00f3digos oficiales. Cuando no se usan, los datos son dif\u00edciles de cruzar entre s\u00ed y hay que normalizarlos antes. provincia Santiago del Estero Stgo. del Estero S. del Estero Sgo. del Estero GET https://apis.datos.gob.ar/georef/api/provincias?nombre=Sgo.%20del%20Estero { \"provincias\": [ { \"nombre\": \"Santiago del Estero\", \"id\": \"86\", \"fuente\": \"IGN\", \"centroide\": { \"lat\": -27.782412, \"lon\": -63.252387 } } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 } Cuando un conjunto de datos tiene puntos de coordenadas dentro de Argentina, puede cruzarse con muchos datos m\u00e1s, relacionados a las unidades territoriales que lo contienen. Para esto hay que agregarlas a los datos originales. lat lon -27.2741 -66.7529 -34.603633 -58.3837587 GET https://apis.datos.gob.ar/georef/api/ubicacion?lat=-27.2741&lon=-66.7529 { \"ubicacion\": { \"departamento\": { \"id\": \"10035\", \"nombre\": \"Bel\u00e9n\" }, \"fuente\": \"IGN\", \"lat\": -27.2741, \"lon\": -66.7529, \"municipio\": { \"id\": \"100077\", \"nombre\": \"Hualf\u00edn\" }, \"provincia\": { \"id\": \"10\", \"nombre\": \"Catamarca\" } } } Finalmente, se puede utilizar la API como punto de referencia al momento de crear datos que est\u00e9n vinculados a datos geogr\u00e1ficos. Por ejemplo, si se cuenta con un formulario en el que se debe mostrar a un usuario un listado de provincias, y luego un listado de municipios a partir de la provincia seleccionada, se podr\u00edan ejecutar las siguientes consultas: Listar las provincias de la Rep\u00fablica Argentina: GET https://apis.datos.gob.ar/georef/api/provincias?campos=id,nombre { \"provincias\": [ { \"nombre\": \"Chaco\", \"id\": \"22\", \"fuente\": \"IGN\" }, { ... } // 23 resultados omitidos ], \"cantidad\": 24, \"total\": 24, \"inicio\": 0 } Asumiendo que el usuario selecciona Chaco (ID: 22 ), se ejecutar\u00eda la siguiente consulta para obtener el listado de municipios: GET https://apis.datos.gob.ar/georef/api/municipios?provincia=22&campos=id,nombre&max=100 { \"municipios\": [ { \"nombre\": \"Makall\u00e9\", \"id\": \"220161\", \"fuente\": \"IGN\" }, { ... } // 67 resultados omitidos ], \"cantidad\": 68, \"total\": 68, \"inicio\": 0 } Notar que al ser datos que no son modificados regularmente, es posible retener copias de los mismos para ser reutilizados en el futuro.","title":"API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos de Argentina"},{"location":"applications/","text":"Aplicaciones \u00b6 Lista de proyectos y aplicaciones que utilizan, extienden o documentan la API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos. De terceros \u00b6 pdelboca/georefar : Interface en R para usar la API por @pdelboca . Contacto \u00b6 \u00bfDesarrollaste una librer\u00eda o ten\u00e9s un proyecto que usa la API? Te invitamos a contarnos as\u00ed la agregamos a esta lista. Para todo lo dem\u00e1s, pod\u00e9s mandarnos tu comentario o consulta a datos@modernizacion.gob.ar .","title":"Aplicaciones"},{"location":"applications/#aplicaciones","text":"Lista de proyectos y aplicaciones que utilizan, extienden o documentan la API del Servicio de Normalizaci\u00f3n de Datos Geogr\u00e1ficos.","title":"Aplicaciones"},{"location":"applications/#de-terceros","text":"pdelboca/georefar : Interface en R para usar la API por @pdelboca .","title":"De terceros"},{"location":"applications/#contacto","text":"\u00bfDesarrollaste una librer\u00eda o ten\u00e9s un proyecto que usa la API? Te invitamos a contarnos as\u00ed la agregamos a esta lista. Para todo lo dem\u00e1s, pod\u00e9s mandarnos tu comentario o consulta a datos@modernizacion.gob.ar .","title":"Contacto"},{"location":"georef-api-data/","text":"Modelo de datos para Georef API \u00b6 Los archivos de datos de Georef consisten de cinco (5) archivos en formato JSON, los cuales contienen provincias, departamentos, municipios, localidades y calles. Fuentes Unidades Territoriales BAHRA V\u00edas de Circulaci\u00f3n Archivos Provincias Departamentos Municipios Localidades Calles Fuentes \u00b6 Los datos utilizados por Georef API fueron obtenidos a trav\u00e9s de un proceso de ETL. Los or\u00edgenes de los datos procesados son: Unidades Territoriales \u00b6 Recursos: /provincias , /departamentos , /municipios , /ubicacion Fuente: Instituto Geogr\u00e1fico Nacional (IGN) Enlace: Datos Abiertos - Unidades Territoriales BAHRA \u00b6 Recursos: /localidades Fuente: Base de Asentamientos Humanos de la Rep\u00fablica Argentina (BAHRA) Enlace: BAHRA - Descargas V\u00edas de Circulaci\u00f3n \u00b6 Recursos: /calles , /direcciones Fuente: Instituto Nacional de Estad\u00edstica y Censos de la Rep\u00fablica Argentina (INDEC) Enlace: Portal de geoservicios de INDEC Archivos \u00b6 A continuaci\u00f3n se detallan, a trav\u00e9s de ejemplos, los esquemas de los archivos para las entidades utilizadas. Notar que el campo version se utiliza al momento de indexar para determinar si los datos son compatibles con la versi\u00f3n de la API siendo utilizada; la versi\u00f3n detallada en este documento es la 4.0.0 . Provincias \u00b6 El archivo de datos de provincias debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"90\", // ID de provincia \"nombre\": \"Tucum\u00e1n\", // Nombre de provincia \"centroide\": { \"lat\": -26.9478, // Latitud de centroide \"lon\": -65.36475 // Longitud de centroide }, \"geometria\": { \"type\": \"mutlipolygon\", // Tipo de geometr\u00eda \"coordinates\": [[[[-58.4549, -34.5351], [-58.4545, -34.5353], ...]]] // Listado de coordenadas (formato WKT) del MultiPolygon } }, { ... }, ] } Departamentos \u00b6 El archivo de datos de departamentos debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"06427\", // ID del departamento \"nombre\": \"La Matanza\", // Nombre del departamento \"centroide\": { \"lat\": -34.770165, // Latitud de centroide \"lon\": -58.625449 // Longitud de centroide }, \"geometria\": { \"type\": \"mutlipolygon\", // Tipo de geometr\u00eda \"coordinates\": [[[[-58.4549, -34.5351], [-58.4545, -34.5353], ...]]] // Listado de coordenadas (formato WKT) del MultiPolygon }, \"provincia\": { // Provincia que contiene al departamento \"id\": \"06\", \"nombre\": \"Buenos Aires\" } }, { ... }, ] } Municipios \u00b6 El archivo de datos de municipios debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"060105\", // ID del municipio \"nombre\": \"Bol\u00edvar\", // Nombre del municipio \"centroide\": { \"lat\": -36.298222, // Latitud de centroide \"lon\": -61.149648 // Longitud de centroide }, \"geometria\": { \"type\": \"mutlipolygon\", // Tipo de geometr\u00eda \"coordinates\": [[[[-58.4453, -34.4324], [-58.6463, -34.6841], ...]]] // Listado de coordenadas (formato WKT) del MultiPolygon }, \"departamento\": { // Departamento que ocupa la mayor \u00e1rea del municipio \"id\": \"06105\", \"nombre\": \"Bol\u00edvar\" }, \"provincia\": { // Provincia que contiene al municipio \"id\": \"06\", \"nombre\": \"Buenos Aires\" } }, { ... }, ] } Localidades \u00b6 El archivo de datos de localidades debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"06189080000\", // ID del asentamiento \"nombre\": \"San Roman\", // Nombre del asentamiento \"tipo\": \"Localidad simple (LS)\", // Tipo de asentamiento BAHRA \"centroide\": { \"lat\": -38.741555, // Latitud de centroide \"lon\": -61.537720 // Longitud de centroide }, \"geometria\": { \"type\": \"multipoint\", // Tipo de geometr\u00eda \"coordinates\": [[-61.5377, -38.7415], ...] // Listado de coordenadas (formato WKT) del MultiPoint }, \"municipio\": { // Municipio que contiene al asentamiento \"id\": \"060189\", // Puede ser null \"nombre\": \"Coronel Dorrego\" // Puede ser null }, \"departamento\": { // Departamento que contiene al asentamiento \"id\": \"06070\", \"nombre\": \"Baradero\" }, \"provincia\": { // Provincia que contiene al asentamiento \"id\": \"06\", \"nombre\": \"Buenos Aires\" } }, { ... }, ] } Calles \u00b6 El archivo de datos de calles debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de v\u00edas de circulaci\u00f3n { \"nomenclatura\": \"LARREA, Comuna 3, Ciudad Aut\u00f3noma de Buenos Aires\", // Nomenclatura: 'nombre, departamento, provincia' \"id\": \"0202101007345\", // ID de la v\u00eda de circulaci\u00f3n \"nombre\": \"LARREA\", // Nombre de v\u00eda de circulaci\u00f3n \"tipo\": \"CALLE\", // Tipo de v\u00eda de circulaci\u00f3n \"altura\": { \"inicio\": { \"derecha\": 1, // N\u00famero inicial de altura (lado derecho) \"izquierda\": 2, // N\u00famero inicial de altura (lado izquierdo) }, \"fin\": { \"derecha\": 799, // N\u00famero final de altura (lado derecho) \"izquierda\": 800, // N\u00famero final de altura (lado izquierdo) } }, \"geometria\": \"0105000020E61000...\", // Geometr\u00eda MultiLineString en formato WKB, representaci\u00f3n hexadecimal \"departamento\": { // Departamento \"nombre\": \"Comuna 3\", \"id\": \"02021\" }, \"provincia\": { // Provincia \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\", \"id\": \"02\" } }, { ... }, ] }","title":"Proceso de ETL y Datos"},{"location":"georef-api-data/#modelo-de-datos-para-georef-api","text":"Los archivos de datos de Georef consisten de cinco (5) archivos en formato JSON, los cuales contienen provincias, departamentos, municipios, localidades y calles. Fuentes Unidades Territoriales BAHRA V\u00edas de Circulaci\u00f3n Archivos Provincias Departamentos Municipios Localidades Calles","title":"Modelo de datos para Georef API"},{"location":"georef-api-data/#fuentes","text":"Los datos utilizados por Georef API fueron obtenidos a trav\u00e9s de un proceso de ETL. Los or\u00edgenes de los datos procesados son:","title":"Fuentes"},{"location":"georef-api-data/#unidades-territoriales","text":"Recursos: /provincias , /departamentos , /municipios , /ubicacion Fuente: Instituto Geogr\u00e1fico Nacional (IGN) Enlace: Datos Abiertos - Unidades Territoriales","title":"Unidades Territoriales"},{"location":"georef-api-data/#bahra","text":"Recursos: /localidades Fuente: Base de Asentamientos Humanos de la Rep\u00fablica Argentina (BAHRA) Enlace: BAHRA - Descargas","title":"BAHRA"},{"location":"georef-api-data/#vias-de-circulacion","text":"Recursos: /calles , /direcciones Fuente: Instituto Nacional de Estad\u00edstica y Censos de la Rep\u00fablica Argentina (INDEC) Enlace: Portal de geoservicios de INDEC","title":"V\u00edas de Circulaci\u00f3n"},{"location":"georef-api-data/#archivos","text":"A continuaci\u00f3n se detallan, a trav\u00e9s de ejemplos, los esquemas de los archivos para las entidades utilizadas. Notar que el campo version se utiliza al momento de indexar para determinar si los datos son compatibles con la versi\u00f3n de la API siendo utilizada; la versi\u00f3n detallada en este documento es la 4.0.0 .","title":"Archivos"},{"location":"georef-api-data/#provincias","text":"El archivo de datos de provincias debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"90\", // ID de provincia \"nombre\": \"Tucum\u00e1n\", // Nombre de provincia \"centroide\": { \"lat\": -26.9478, // Latitud de centroide \"lon\": -65.36475 // Longitud de centroide }, \"geometria\": { \"type\": \"mutlipolygon\", // Tipo de geometr\u00eda \"coordinates\": [[[[-58.4549, -34.5351], [-58.4545, -34.5353], ...]]] // Listado de coordenadas (formato WKT) del MultiPolygon } }, { ... }, ] }","title":"Provincias"},{"location":"georef-api-data/#departamentos","text":"El archivo de datos de departamentos debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"06427\", // ID del departamento \"nombre\": \"La Matanza\", // Nombre del departamento \"centroide\": { \"lat\": -34.770165, // Latitud de centroide \"lon\": -58.625449 // Longitud de centroide }, \"geometria\": { \"type\": \"mutlipolygon\", // Tipo de geometr\u00eda \"coordinates\": [[[[-58.4549, -34.5351], [-58.4545, -34.5353], ...]]] // Listado de coordenadas (formato WKT) del MultiPolygon }, \"provincia\": { // Provincia que contiene al departamento \"id\": \"06\", \"nombre\": \"Buenos Aires\" } }, { ... }, ] }","title":"Departamentos"},{"location":"georef-api-data/#municipios","text":"El archivo de datos de municipios debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"060105\", // ID del municipio \"nombre\": \"Bol\u00edvar\", // Nombre del municipio \"centroide\": { \"lat\": -36.298222, // Latitud de centroide \"lon\": -61.149648 // Longitud de centroide }, \"geometria\": { \"type\": \"mutlipolygon\", // Tipo de geometr\u00eda \"coordinates\": [[[[-58.4453, -34.4324], [-58.6463, -34.6841], ...]]] // Listado de coordenadas (formato WKT) del MultiPolygon }, \"departamento\": { // Departamento que ocupa la mayor \u00e1rea del municipio \"id\": \"06105\", \"nombre\": \"Bol\u00edvar\" }, \"provincia\": { // Provincia que contiene al municipio \"id\": \"06\", \"nombre\": \"Buenos Aires\" } }, { ... }, ] }","title":"Municipios"},{"location":"georef-api-data/#localidades","text":"El archivo de datos de localidades debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de entidades { \"id\": \"06189080000\", // ID del asentamiento \"nombre\": \"San Roman\", // Nombre del asentamiento \"tipo\": \"Localidad simple (LS)\", // Tipo de asentamiento BAHRA \"centroide\": { \"lat\": -38.741555, // Latitud de centroide \"lon\": -61.537720 // Longitud de centroide }, \"geometria\": { \"type\": \"multipoint\", // Tipo de geometr\u00eda \"coordinates\": [[-61.5377, -38.7415], ...] // Listado de coordenadas (formato WKT) del MultiPoint }, \"municipio\": { // Municipio que contiene al asentamiento \"id\": \"060189\", // Puede ser null \"nombre\": \"Coronel Dorrego\" // Puede ser null }, \"departamento\": { // Departamento que contiene al asentamiento \"id\": \"06070\", \"nombre\": \"Baradero\" }, \"provincia\": { // Provincia que contiene al asentamiento \"id\": \"06\", \"nombre\": \"Buenos Aires\" } }, { ... }, ] }","title":"Localidades"},{"location":"georef-api-data/#calles","text":"El archivo de datos de calles debe tener formato JSON. Su esquema de datos debe ser el siguiente: { \"timestamp\": \"1532435389\", // Timestamp de creaci\u00f3n \"fecha_actualizacion\": \"2018-07-24 12:29:49.813835+00:00\", // Fecha de creaci\u00f3n \"version\": \"4.0.0\", // Versi\u00f3n de archivo \"datos\": [ // Lista de v\u00edas de circulaci\u00f3n { \"nomenclatura\": \"LARREA, Comuna 3, Ciudad Aut\u00f3noma de Buenos Aires\", // Nomenclatura: 'nombre, departamento, provincia' \"id\": \"0202101007345\", // ID de la v\u00eda de circulaci\u00f3n \"nombre\": \"LARREA\", // Nombre de v\u00eda de circulaci\u00f3n \"tipo\": \"CALLE\", // Tipo de v\u00eda de circulaci\u00f3n \"altura\": { \"inicio\": { \"derecha\": 1, // N\u00famero inicial de altura (lado derecho) \"izquierda\": 2, // N\u00famero inicial de altura (lado izquierdo) }, \"fin\": { \"derecha\": 799, // N\u00famero final de altura (lado derecho) \"izquierda\": 800, // N\u00famero final de altura (lado izquierdo) } }, \"geometria\": \"0105000020E61000...\", // Geometr\u00eda MultiLineString en formato WKB, representaci\u00f3n hexadecimal \"departamento\": { // Departamento \"nombre\": \"Comuna 3\", \"id\": \"02021\" }, \"provincia\": { // Provincia \"nombre\": \"Ciudad Aut\u00f3noma de Buenos Aires\", \"id\": \"02\" } }, { ... }, ] }","title":"Calles"},{"location":"georef-api-development/","text":"Gu\u00eda de instalaci\u00f3n para desarrolladores \u00b6 En este documento se detallan los pasos a seguir si se desea configurar un servidor de API Georef propio. Dependencias Instalaci\u00f3n 1. Base de datos 2. Elasticsearch 3. Repositorio y dependencias 4. Cargar las funciones SQL 5. Crear los \u00edndices 6. (Opcional) Re-indexar datos 7. Correr API Tests Archivos de datos Dependencias \u00b6 Elasticsearch >=6.2.0 Python >=3.6.x PostgreSQL 9.6 PostGIS 2.3 Nginx (para entornos productivos) Instalaci\u00f3n \u00b6 1. Base de datos \u00b6 Crear una base de datos en PostgreSQL con la extensi\u00f3n PostGIS. A continuaci\u00f3n, se muestra un ejemplo utilizando georef_api como nombre para la base de datos: -- Crear la base de datos: CREATE DATABASE georef_api WITH ENCODING='UTF8'; -- Agregar PostGIS a la base de datos creada: CREATE EXTENSION postgis; 2. Elasticsearch \u00b6 Para instalar Elasticsearch, seguir las siguientes instrucciones en uno o m\u00e1s servidores (nodos). 2.1 Instalar el entorno de ejecuci\u00f3n para Java: \u00b6 $ sudo apt install default-jre 2.2 Instalar Elasticsearch: \u00b6 $ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.0.deb $ sudo dpkg -i elasticsearch-6.2.0.deb $ sudo systemctl enable elasticsearch # utilizando systemd para administrar el servicio 2.3 Aplicar las configuraciones recomendadas \u00b6 Editar el archivo /etc/elasticsearch/elasticsearch.yml (el valor de node.name debe ser \u00fanico por nodo): node.name: node-1 http.max_content_length: 100mb Editar el archivo /etc/elasticsearch/jvm.options (siguiendo las recomendaciones de Elasticsearch ): # Tama\u00f1o del heap size de la JVM # Se recomienda utilizar siempre el mismo valor como m\u00ednimo y m\u00e1ximo # Ejemplo: 4 GB -Xms4g -Xmx4g 3. Repositorio y dependencias \u00b6 3.1 Clonar el repositorio: \u00b6 $ git clone https://github.com/datosgobar/georef-api.git $ cd georef-api 3.2 Crear un entorno virtual y activarlo: \u00b6 $ python3 -m venv venv $ source venv/bin/activate 3.3 Instalar dependencias con pip : \u00b6 (venv) $ pip3 install -r requirements.txt -r requirements-dev.txt 3.4 Copiar el archivo de configuraci\u00f3n: \u00b6 (venv) $ cp config/georef.example.cfg config/georef.cfg Luego, completar el archivo config/georef.cfg con los valores apropiados. 3.5 Copiar el archivo de configuraci\u00f3n de logs: \u00b6 (venv) $ cp config/logging.example.ini config/logging.ini Luego, completar el archivo config/logging.ini con los valores apropiados. Los valores por defecto son v\u00e1lidos y pueden ser utilizados en entornos productivos. 3.6 Crear el archivo de sin\u00f3nimos \u00b6 Adicionalmente, se debe crear un archivo georef_synonyms.txt , en la ubicaci\u00f3n del archivo de configuraci\u00f3n de Elasticsearch ( $ES_HOME/config ). El archivo contiene la base de sin\u00f3nimos utilizados al momento de indexar documentos. Su contenido puede ser vac\u00edo o contener, por ejemplo, el siguiente contenido: buenos aires, bsas ciudad autonoma de buenos aires, caba, capital federal santiago, sgo, stgo 4. Cargar las funciones SQL \u00b6 Cargar las funciones SQL necesarias para el funcionamiento de la API: (venv) $ make load_sql 5. Crear los \u00edndices \u00b6 Generar \u00edndices de entidades y calles: (venv) $ make index Listar los \u00edndices creados, y otros datos adicionales: (venv) $ make print_index_stats 6. (Opcional) Re-indexar datos \u00b6 Si se modifican los archivos de datos JSON, es posible re-indexarlos sin borrar los \u00edndices ya existentes. Dependiendo del comportamiento que se desee, se debe tomar una opci\u00f3n: Indexar datos nuevos \u00b6 Si se desea actualizar los \u00edndices con los nuevos datos, solo si los datos entrantes son m\u00e1s recientes, se puede utilizar nuevamente: (venv) $ make index Forzar re-indexado \u00b6 Si se desea forzar un re-indexado, es decir, si se desea indexar los datos nuevamente sin importar la fecha de creaci\u00f3n, se debe utilizar la siguiente receta: (venv) $ make index_forced La receta index_forced intenta utilizar un archivo de respaldo guardado anteriormente si no pudo acceder a los archivos especificados en config/georef.cfg . El uso de la receta es recomendado cuando se requiere re-indexar los datos incondicionalmente, algunas situaciones donde esto es necesario son: Modificaci\u00f3n de la estructura de los archivos de datos Modificaci\u00f3n de mappeos de tipos de Elasticsearch Modificaci\u00f3n de analizadores de texto de Elasticsearch Modificaci\u00f3n de listado de sin\u00f3nimos Cualquiera de las dos opciones tambi\u00e9n permite indexar datos selectivamente: se debe especificar el nombre del \u00edndice a crear/re-indexar. Por ejemplo: (venv) $ make index INDEX_NAME=localidades (venv) $ make index_forced INDEX_NAME=calles Los nombres de los \u00edndices disponibles son: provincias departamentos municipios localidades calles 7. Correr API \u00b6 Entornos de desarrollo \u00b6 Correr la API de Georef utilizando un servidor de prueba (no apto para producci\u00f3n): (venv) $ make start_dev_server Entornos productivos \u00b6 7.1 Configurar servicio georef-api para systemd \u00b6 Copiar el archivo config/georef-api.service a /etc/systemd/system/ y configurarlo. Notar los campos marcados entre ' < ' y ' > ', que deben ser reemplazados por el usuario. 7.2 Activar y arrancar el servicio \u00b6 $ sudo systemctl daemon-reload $ sudo systemctl enable georef-api.service $ sudo systemctl start georef-api.service 7.3 Configurar nginx \u00b6 Primero, crear /etc/nginx/sites-available/georef-api tomando como base la configuraci\u00f3n del archivo georef-api.nginx . 7.4 (Opcional) Crear cache para nginx \u00b6 Si se desea activar el uso del cache de nginx , descomentar las l\u00edneas contentiendo las directivas proxy_cache y proxy_cache_valid del archivo georef-api creado. Luego, activar el cache georef agregando la siguiente l\u00ednea al archivo de configuraci\u00f3n nginx.conf (secci\u00f3n http ): proxy_cache_path /data/nginx/cache levels=1:2 inactive=120m keys_zone=georef:10m use_temp_path=off; Finalmente, crear el directorio /data/nginx/cache . 7.5 Activar y validar configuraci\u00f3n nginx \u00b6 Generar un link simb\u00f3lico a la configuraci\u00f3n del sitio: $ sudo ln -s /etc/nginx/sites-available/georef-api /etc/nginx/sites-enabled/georef-api Validar la configuraci\u00f3n: $ sudo nginx -t Cargar la nueva configuraci\u00f3n: $ sudo nginx -s reload Reiniciar Nginx: $ systemctl restart nginx.service Tests \u00b6 Ejecutar los tests unitarios (los servicios Elasticsearch y PostgreSQL deben estar activos y con los datos apropiados cargados): (venv) $ make test_all Archivos de datos \u00b6 La estructura de los archivos de datos JSON utilizados por Georef est\u00e1 detallada en este documento . El archivo de configuraci\u00f3n config/georef.cfg debe especificar una ruta local o una URL externa para cada archivo de datos JSON. Notar que los valores por defecto (en georef.example.cfg ) utilizan el portal de descargas infra.datos.gob.ar , que siempre provee la \u00faltima versi\u00f3n de los archivos JSON disponibles.","title":"Ambiente de desarrollo y deploy"},{"location":"georef-api-development/#guia-de-instalacion-para-desarrolladores","text":"En este documento se detallan los pasos a seguir si se desea configurar un servidor de API Georef propio. Dependencias Instalaci\u00f3n 1. Base de datos 2. Elasticsearch 3. Repositorio y dependencias 4. Cargar las funciones SQL 5. Crear los \u00edndices 6. (Opcional) Re-indexar datos 7. Correr API Tests Archivos de datos","title":"Gu\u00eda de instalaci\u00f3n para desarrolladores"},{"location":"georef-api-development/#dependencias","text":"Elasticsearch >=6.2.0 Python >=3.6.x PostgreSQL 9.6 PostGIS 2.3 Nginx (para entornos productivos)","title":"Dependencias"},{"location":"georef-api-development/#instalacion","text":"","title":"Instalaci\u00f3n"},{"location":"georef-api-development/#1-base-de-datos","text":"Crear una base de datos en PostgreSQL con la extensi\u00f3n PostGIS. A continuaci\u00f3n, se muestra un ejemplo utilizando georef_api como nombre para la base de datos: -- Crear la base de datos: CREATE DATABASE georef_api WITH ENCODING='UTF8'; -- Agregar PostGIS a la base de datos creada: CREATE EXTENSION postgis;","title":"1. Base de datos"},{"location":"georef-api-development/#2-elasticsearch","text":"Para instalar Elasticsearch, seguir las siguientes instrucciones en uno o m\u00e1s servidores (nodos).","title":"2. Elasticsearch"},{"location":"georef-api-development/#21-instalar-el-entorno-de-ejecucion-para-java","text":"$ sudo apt install default-jre","title":"2.1 Instalar el entorno de ejecuci\u00f3n para Java:"},{"location":"georef-api-development/#22-instalar-elasticsearch","text":"$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.2.0.deb $ sudo dpkg -i elasticsearch-6.2.0.deb $ sudo systemctl enable elasticsearch # utilizando systemd para administrar el servicio","title":"2.2 Instalar Elasticsearch:"},{"location":"georef-api-development/#23-aplicar-las-configuraciones-recomendadas","text":"Editar el archivo /etc/elasticsearch/elasticsearch.yml (el valor de node.name debe ser \u00fanico por nodo): node.name: node-1 http.max_content_length: 100mb Editar el archivo /etc/elasticsearch/jvm.options (siguiendo las recomendaciones de Elasticsearch ): # Tama\u00f1o del heap size de la JVM # Se recomienda utilizar siempre el mismo valor como m\u00ednimo y m\u00e1ximo # Ejemplo: 4 GB -Xms4g -Xmx4g","title":"2.3 Aplicar las configuraciones recomendadas"},{"location":"georef-api-development/#3-repositorio-y-dependencias","text":"","title":"3. Repositorio y dependencias"},{"location":"georef-api-development/#31-clonar-el-repositorio","text":"$ git clone https://github.com/datosgobar/georef-api.git $ cd georef-api","title":"3.1 Clonar el repositorio:"},{"location":"georef-api-development/#32-crear-un-entorno-virtual-y-activarlo","text":"$ python3 -m venv venv $ source venv/bin/activate","title":"3.2 Crear un entorno virtual y activarlo:"},{"location":"georef-api-development/#33-instalar-dependencias-con-pip","text":"(venv) $ pip3 install -r requirements.txt -r requirements-dev.txt","title":"3.3 Instalar dependencias con pip:"},{"location":"georef-api-development/#34-copiar-el-archivo-de-configuracion","text":"(venv) $ cp config/georef.example.cfg config/georef.cfg Luego, completar el archivo config/georef.cfg con los valores apropiados.","title":"3.4 Copiar el archivo de configuraci\u00f3n:"},{"location":"georef-api-development/#35-copiar-el-archivo-de-configuracion-de-logs","text":"(venv) $ cp config/logging.example.ini config/logging.ini Luego, completar el archivo config/logging.ini con los valores apropiados. Los valores por defecto son v\u00e1lidos y pueden ser utilizados en entornos productivos.","title":"3.5 Copiar el archivo de configuraci\u00f3n de logs:"},{"location":"georef-api-development/#36-crear-el-archivo-de-sinonimos","text":"Adicionalmente, se debe crear un archivo georef_synonyms.txt , en la ubicaci\u00f3n del archivo de configuraci\u00f3n de Elasticsearch ( $ES_HOME/config ). El archivo contiene la base de sin\u00f3nimos utilizados al momento de indexar documentos. Su contenido puede ser vac\u00edo o contener, por ejemplo, el siguiente contenido: buenos aires, bsas ciudad autonoma de buenos aires, caba, capital federal santiago, sgo, stgo","title":"3.6 Crear el archivo de sin\u00f3nimos"},{"location":"georef-api-development/#4-cargar-las-funciones-sql","text":"Cargar las funciones SQL necesarias para el funcionamiento de la API: (venv) $ make load_sql","title":"4. Cargar las funciones SQL"},{"location":"georef-api-development/#5-crear-los-indices","text":"Generar \u00edndices de entidades y calles: (venv) $ make index Listar los \u00edndices creados, y otros datos adicionales: (venv) $ make print_index_stats","title":"5. Crear los \u00edndices"},{"location":"georef-api-development/#6-opcional-re-indexar-datos","text":"Si se modifican los archivos de datos JSON, es posible re-indexarlos sin borrar los \u00edndices ya existentes. Dependiendo del comportamiento que se desee, se debe tomar una opci\u00f3n:","title":"6. (Opcional) Re-indexar datos"},{"location":"georef-api-development/#indexar-datos-nuevos","text":"Si se desea actualizar los \u00edndices con los nuevos datos, solo si los datos entrantes son m\u00e1s recientes, se puede utilizar nuevamente: (venv) $ make index","title":"Indexar datos nuevos"},{"location":"georef-api-development/#forzar-re-indexado","text":"Si se desea forzar un re-indexado, es decir, si se desea indexar los datos nuevamente sin importar la fecha de creaci\u00f3n, se debe utilizar la siguiente receta: (venv) $ make index_forced La receta index_forced intenta utilizar un archivo de respaldo guardado anteriormente si no pudo acceder a los archivos especificados en config/georef.cfg . El uso de la receta es recomendado cuando se requiere re-indexar los datos incondicionalmente, algunas situaciones donde esto es necesario son: Modificaci\u00f3n de la estructura de los archivos de datos Modificaci\u00f3n de mappeos de tipos de Elasticsearch Modificaci\u00f3n de analizadores de texto de Elasticsearch Modificaci\u00f3n de listado de sin\u00f3nimos Cualquiera de las dos opciones tambi\u00e9n permite indexar datos selectivamente: se debe especificar el nombre del \u00edndice a crear/re-indexar. Por ejemplo: (venv) $ make index INDEX_NAME=localidades (venv) $ make index_forced INDEX_NAME=calles Los nombres de los \u00edndices disponibles son: provincias departamentos municipios localidades calles","title":"Forzar re-indexado"},{"location":"georef-api-development/#7-correr-api","text":"","title":"7. Correr API"},{"location":"georef-api-development/#entornos-de-desarrollo","text":"Correr la API de Georef utilizando un servidor de prueba (no apto para producci\u00f3n): (venv) $ make start_dev_server","title":"Entornos de desarrollo"},{"location":"georef-api-development/#entornos-productivos","text":"","title":"Entornos productivos"},{"location":"georef-api-development/#71-configurar-servicio-georef-api-para-systemd","text":"Copiar el archivo config/georef-api.service a /etc/systemd/system/ y configurarlo. Notar los campos marcados entre ' < ' y ' > ', que deben ser reemplazados por el usuario.","title":"7.1 Configurar servicio georef-api para systemd"},{"location":"georef-api-development/#72-activar-y-arrancar-el-servicio","text":"$ sudo systemctl daemon-reload $ sudo systemctl enable georef-api.service $ sudo systemctl start georef-api.service","title":"7.2 Activar y arrancar el servicio"},{"location":"georef-api-development/#73-configurar-nginx","text":"Primero, crear /etc/nginx/sites-available/georef-api tomando como base la configuraci\u00f3n del archivo georef-api.nginx .","title":"7.3 Configurar nginx"},{"location":"georef-api-development/#74-opcional-crear-cache-para-nginx","text":"Si se desea activar el uso del cache de nginx , descomentar las l\u00edneas contentiendo las directivas proxy_cache y proxy_cache_valid del archivo georef-api creado. Luego, activar el cache georef agregando la siguiente l\u00ednea al archivo de configuraci\u00f3n nginx.conf (secci\u00f3n http ): proxy_cache_path /data/nginx/cache levels=1:2 inactive=120m keys_zone=georef:10m use_temp_path=off; Finalmente, crear el directorio /data/nginx/cache .","title":"7.4 (Opcional) Crear cache para nginx"},{"location":"georef-api-development/#75-activar-y-validar-configuracion-nginx","text":"Generar un link simb\u00f3lico a la configuraci\u00f3n del sitio: $ sudo ln -s /etc/nginx/sites-available/georef-api /etc/nginx/sites-enabled/georef-api Validar la configuraci\u00f3n: $ sudo nginx -t Cargar la nueva configuraci\u00f3n: $ sudo nginx -s reload Reiniciar Nginx: $ systemctl restart nginx.service","title":"7.5 Activar y validar configuraci\u00f3n nginx"},{"location":"georef-api-development/#tests","text":"Ejecutar los tests unitarios (los servicios Elasticsearch y PostgreSQL deben estar activos y con los datos apropiados cargados): (venv) $ make test_all","title":"Tests"},{"location":"georef-api-development/#archivos-de-datos","text":"La estructura de los archivos de datos JSON utilizados por Georef est\u00e1 detallada en este documento . El archivo de configuraci\u00f3n config/georef.cfg debe especificar una ruta local o una URL externa para cada archivo de datos JSON. Notar que los valores por defecto (en georef.example.cfg ) utilizan el portal de descargas infra.datos.gob.ar , que siempre provee la \u00faltima versi\u00f3n de los archivos JSON disponibles.","title":"Archivos de datos"},{"location":"history/","text":"Historial de versiones \u00b6 0.1.6 \u00b6 Actualiza proceso de indexaci\u00f3n para utilizar datos de ETL versi\u00f3n 4.0.0 . Modifica manejo de altura en recurso /direcciones . La nueva versi\u00f3n del recurso intenta ubicar altura dentro de los extremos de la calle tomando en consideraci\u00f3n que los datos pueden no siempre estar completos (o ser ideales). Este cambio tambi\u00e9n afecta la efectividad de la geolocalizaci\u00f3n de direcciones. 0.1.5 \u00b6 Mejora mensajes de errores para varios casos: Acceso a recursos inexistentes (por ejemplo: /provincia ). Valores inv\u00e1lidos para par\u00e1metros con elecci\u00f3n limitada de valores (por ejemplo, orden ). Listas de operaciones bulk inv\u00e1lidas. Direcciones de calles malformadas. Agrega API de paginado. Nuevo par\u00e1metro: inicio . Los resultados ahora incluyen tres metadatos: cantidad , total e inicio . 0.1.4 \u00b6 Se modific\u00f3 la interpretaci\u00f3n del par\u00e1metro direccion del recurso /direcciones : Se ignoran \u00edtems entre par\u00e9ntesis y ocurrencias de \"N\u00b0\" Se separa el texto utilizando \"-\", \",\" y \"B\u00b0\", y se intenta extraer una direcci\u00f3n (nombre + altura) de cada fragmento. 0.1.3 \u00b6 Se modificaron los siguientes campos: centroide_lat y centroide_lon ahora est\u00e1n anidados. Los campos altura_inicio_derecha , altura_fin_derecha , etc. ahora est\u00e1n anidados. Se agreg\u00f3 una validaci\u00f3n de valores repetidos para par\u00e1metro campos . El recurso /provincias ahora acepta el par\u00e1metro aplanar . 0.1.2 \u00b6 Se removi\u00f3 d como stopword en Elasticsearch. 0.1.1 \u00b6 Se modificaron los siguientes campos: lat ahora es centroide_lat . lon ahora es centroide_lon . Los campos inicio_derecha , fin_derecha , etc. ahora comienzan con altura_ . 0.1.0 \u00b6 Versi\u00f3n inicial.","title":"Historial de versiones"},{"location":"history/#historial-de-versiones","text":"","title":"Historial de versiones"},{"location":"history/#016","text":"Actualiza proceso de indexaci\u00f3n para utilizar datos de ETL versi\u00f3n 4.0.0 . Modifica manejo de altura en recurso /direcciones . La nueva versi\u00f3n del recurso intenta ubicar altura dentro de los extremos de la calle tomando en consideraci\u00f3n que los datos pueden no siempre estar completos (o ser ideales). Este cambio tambi\u00e9n afecta la efectividad de la geolocalizaci\u00f3n de direcciones.","title":"0.1.6"},{"location":"history/#015","text":"Mejora mensajes de errores para varios casos: Acceso a recursos inexistentes (por ejemplo: /provincia ). Valores inv\u00e1lidos para par\u00e1metros con elecci\u00f3n limitada de valores (por ejemplo, orden ). Listas de operaciones bulk inv\u00e1lidas. Direcciones de calles malformadas. Agrega API de paginado. Nuevo par\u00e1metro: inicio . Los resultados ahora incluyen tres metadatos: cantidad , total e inicio .","title":"0.1.5"},{"location":"history/#014","text":"Se modific\u00f3 la interpretaci\u00f3n del par\u00e1metro direccion del recurso /direcciones : Se ignoran \u00edtems entre par\u00e9ntesis y ocurrencias de \"N\u00b0\" Se separa el texto utilizando \"-\", \",\" y \"B\u00b0\", y se intenta extraer una direcci\u00f3n (nombre + altura) de cada fragmento.","title":"0.1.4"},{"location":"history/#013","text":"Se modificaron los siguientes campos: centroide_lat y centroide_lon ahora est\u00e1n anidados. Los campos altura_inicio_derecha , altura_fin_derecha , etc. ahora est\u00e1n anidados. Se agreg\u00f3 una validaci\u00f3n de valores repetidos para par\u00e1metro campos . El recurso /provincias ahora acepta el par\u00e1metro aplanar .","title":"0.1.3"},{"location":"history/#012","text":"Se removi\u00f3 d como stopword en Elasticsearch.","title":"0.1.2"},{"location":"history/#011","text":"Se modificaron los siguientes campos: lat ahora es centroide_lat . lon ahora es centroide_lon . Los campos inicio_derecha , fin_derecha , etc. ahora comienzan con altura_ .","title":"0.1.1"},{"location":"history/#010","text":"Versi\u00f3n inicial.","title":"0.1.0"},{"location":"jwt-token/","text":"Tokens JWT \u00b6 Si pertenec\u00e9s a un organismo de la Administraci\u00f3n P\u00fablica Nacional y quer\u00e9s incrementar la cuota de uso de la API de Georef, pod\u00e9s pedir un token y autenticarte utilizando JWT . Python Node.js Para generar un token JWT, se requieren dos elementos: una key y un secret generados para el uso con la API. Una vez obtenidos ambos elementos, se puede generar un token JWT utilizando, por ejemplo, Python o Node.js. A continuaci\u00f3n, se muestran ejemplos utilizando los siguientes valores demostrativos: key = YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk secret = dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq El algoritmo de autentificaci\u00f3n de mensajes con hash utilizado es HMAC-SHA256 ( HS256 ). Python \u00b6 Utilizando la librer\u00eda pyjwt : $ pip install pyjwt $ python >>> import jwt >>> key = 'YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk' >>> message = { 'iss': key } >>> secret = 'dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq' >>> token_bytes = jwt.encode(message, secret, algorithm='HS256') >>> token = token_bytes.decode() >>> token 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJZWE5rYzJSaGMyUm1ZWE5rWm1GelptUmhjMlJtWVhOayJ9.P4leoe9q_H3lmIlnpZuVFSt7ORgLhLfQ3JN_3FMexSo' Finalmente, para consumir la API de Georef, adjuntar el token generado en las cabeceras HTTP. A continuaci\u00f3n, se muestra un ejemplo utilizando la librer\u00eda requests : >>> import requests >>> headers = { 'Authorization': 'Bearer {}'.format(token) } >>> resp = requests.get('https://apis.datos.gob.ar/georef/api/provincias', headers=headers) >>> resp.json() { 'provincias': [ { ... } ] } Node.js \u00b6 Utilizando la librer\u00eda jswonwebtoken : $ npm install jsonwebtoken $ node > var jwt = require('jsonwebtoken') > var payload = { 'iss': 'YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk' } > var secret = 'dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq' > var token = jwt.sign(payload, secret, { 'noTimestamp': true }) > token 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJZWE5rYzJSaGMyUm1ZWE5rWm1GelptUmhjMlJtWVhOayJ9.P4leoe9q_H3lmIlnpZuVFSt7ORgLhLfQ3JN_3FMexSo' Finalmente, para consumir la API de Georef, adjuntar el token generado en las cabeceras HTTP: > var http = require('http') > http.get({ 'hostname': 'apis.datos.gob.ar', 'path': '/georef/api/provincias', 'headers': { 'authorization': 'Bearer ' + token } }, function(response) { ... })","title":"Autenticarse con JWT"},{"location":"jwt-token/#tokens-jwt","text":"Si pertenec\u00e9s a un organismo de la Administraci\u00f3n P\u00fablica Nacional y quer\u00e9s incrementar la cuota de uso de la API de Georef, pod\u00e9s pedir un token y autenticarte utilizando JWT . Python Node.js Para generar un token JWT, se requieren dos elementos: una key y un secret generados para el uso con la API. Una vez obtenidos ambos elementos, se puede generar un token JWT utilizando, por ejemplo, Python o Node.js. A continuaci\u00f3n, se muestran ejemplos utilizando los siguientes valores demostrativos: key = YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk secret = dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq El algoritmo de autentificaci\u00f3n de mensajes con hash utilizado es HMAC-SHA256 ( HS256 ).","title":"Tokens JWT"},{"location":"jwt-token/#python","text":"Utilizando la librer\u00eda pyjwt : $ pip install pyjwt $ python >>> import jwt >>> key = 'YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk' >>> message = { 'iss': key } >>> secret = 'dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq' >>> token_bytes = jwt.encode(message, secret, algorithm='HS256') >>> token = token_bytes.decode() >>> token 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJZWE5rYzJSaGMyUm1ZWE5rWm1GelptUmhjMlJtWVhOayJ9.P4leoe9q_H3lmIlnpZuVFSt7ORgLhLfQ3JN_3FMexSo' Finalmente, para consumir la API de Georef, adjuntar el token generado en las cabeceras HTTP. A continuaci\u00f3n, se muestra un ejemplo utilizando la librer\u00eda requests : >>> import requests >>> headers = { 'Authorization': 'Bearer {}'.format(token) } >>> resp = requests.get('https://apis.datos.gob.ar/georef/api/provincias', headers=headers) >>> resp.json() { 'provincias': [ { ... } ] }","title":"Python"},{"location":"jwt-token/#nodejs","text":"Utilizando la librer\u00eda jswonwebtoken : $ npm install jsonwebtoken $ node > var jwt = require('jsonwebtoken') > var payload = { 'iss': 'YXNkc2Rhc2RmYXNkZmFzZmRhc2RmYXNk' } > var secret = 'dnVvODY4Yzc2bzhzNzZqOG83czY4b2Nq' > var token = jwt.sign(payload, secret, { 'noTimestamp': true }) > token 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJZWE5rYzJSaGMyUm1ZWE5rWm1GelptUmhjMlJtWVhOayJ9.P4leoe9q_H3lmIlnpZuVFSt7ORgLhLfQ3JN_3FMexSo' Finalmente, para consumir la API de Georef, adjuntar el token generado en las cabeceras HTTP: > var http = require('http') > http.get({ 'hostname': 'apis.datos.gob.ar', 'path': '/georef/api/provincias', 'headers': { 'authorization': 'Bearer ' + token } }, function(response) { ... })","title":"Node.js"},{"location":"python3.6/","text":"Instalaci\u00f3n de Python 3.6 \u00b6 Para instalar Python 3.6 en entornos GNU/Linux, se puede utilizar la herramienta pyenv disponible en GitHub . pyenv permite al usuario instalar cualquier versi\u00f3n de Python existente, e incluso tener varias versiones instaladas simult\u00e1neamente. A continuaci\u00f3n, se detallan los pasos necesarios para instalar Python 3.6. Los mismos fueron creados utilizando Ubuntu 16.04. 1. Descargar pyenv 2. Agregar configuraci\u00f3n de pyenv a ~/.bashrc 3. Activar la nueva configuraci\u00f3n 4. Instalar dependencias para compilar Python 5. Descargar, compilar e instalar Python 3.6 6. Activar Python 3.6 1. Descargar pyenv \u00b6 Clonar el repositorio de pyenv en el directorio ~/.pyenv : $ git clone https://github.com/pyenv/pyenv.git ~/.pyenv 2. Agregar configuraci\u00f3n de pyenv a ~/.bashrc \u00b6 $ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bashrc 3. Activar la nueva configuraci\u00f3n \u00b6 $ source ~/.bashrc 4. Instalar dependencias para compilar Python \u00b6 $ sudo apt install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev 5. Descargar, compilar e instalar Python 3.6 \u00b6 $ pyenv install 3.6.5 6. Activar Python 3.6 \u00b6 Una vez instalado Python 3.6, se debe activar su uso. pyenv permite establecer versiones de Python por directorio: de esta forma, es posible clonar el repositorio georef-ar-api en una ubicaci\u00f3n, y activar el uso de Python 3.6 en la misma: $ git clone https://github.com/datosgobar/georef-api.git $ cd georef-api $ pyenv version 3.6.5 # activar el uso de Python 3.6 $ python --version # el comando 'python' ahora utiliza Python 3.6, en este directorio Python 3.6.5 $ pip --version # tambi\u00e9n se instala 'pip' autom\u00e1ticamente pip 9.0.1 (python 3.6.5) Notar que pyenv crea un archivo llamado .python-version , donde se especifica la versi\u00f3n de Python que deber\u00eda ser utilizada en el directorio.","title":"Instalaci\u00f3n de Python 3.6"},{"location":"python3.6/#instalacion-de-python-36","text":"Para instalar Python 3.6 en entornos GNU/Linux, se puede utilizar la herramienta pyenv disponible en GitHub . pyenv permite al usuario instalar cualquier versi\u00f3n de Python existente, e incluso tener varias versiones instaladas simult\u00e1neamente. A continuaci\u00f3n, se detallan los pasos necesarios para instalar Python 3.6. Los mismos fueron creados utilizando Ubuntu 16.04. 1. Descargar pyenv 2. Agregar configuraci\u00f3n de pyenv a ~/.bashrc 3. Activar la nueva configuraci\u00f3n 4. Instalar dependencias para compilar Python 5. Descargar, compilar e instalar Python 3.6 6. Activar Python 3.6","title":"Instalaci\u00f3n de Python 3.6"},{"location":"python3.6/#1-descargar-pyenv","text":"Clonar el repositorio de pyenv en el directorio ~/.pyenv : $ git clone https://github.com/pyenv/pyenv.git ~/.pyenv","title":"1. Descargar pyenv"},{"location":"python3.6/#2-agregar-configuracion-de-pyenv-a-bashrc","text":"$ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> ~/.bashrc $ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc $ echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n eval \"$(pyenv init -)\"\\nfi' >> ~/.bashrc","title":"2. Agregar configuraci\u00f3n de pyenv a ~/.bashrc"},{"location":"python3.6/#3-activar-la-nueva-configuracion","text":"$ source ~/.bashrc","title":"3. Activar la nueva configuraci\u00f3n"},{"location":"python3.6/#4-instalar-dependencias-para-compilar-python","text":"$ sudo apt install make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev libffi-dev liblzma-dev","title":"4. Instalar dependencias para compilar Python"},{"location":"python3.6/#5-descargar-compilar-e-instalar-python-36","text":"$ pyenv install 3.6.5","title":"5. Descargar, compilar e instalar Python 3.6"},{"location":"python3.6/#6-activar-python-36","text":"Una vez instalado Python 3.6, se debe activar su uso. pyenv permite establecer versiones de Python por directorio: de esta forma, es posible clonar el repositorio georef-ar-api en una ubicaci\u00f3n, y activar el uso de Python 3.6 en la misma: $ git clone https://github.com/datosgobar/georef-api.git $ cd georef-api $ pyenv version 3.6.5 # activar el uso de Python 3.6 $ python --version # el comando 'python' ahora utiliza Python 3.6, en este directorio Python 3.6.5 $ pip --version # tambi\u00e9n se instala 'pip' autom\u00e1ticamente pip 9.0.1 (python 3.6.5) Notar que pyenv crea un archivo llamado .python-version , donde se especifica la versi\u00f3n de Python que deber\u00eda ser utilizada en el directorio.","title":"6. Activar Python 3.6"},{"location":"python_usage/","text":"Usar en Python \u00b6 Con requests Normalizar una entidad Normalizar varias entidades Enriquecer coordenadas con las unidades territoriales que las contienen Con pandas Consultar listas de referencia Enriquecer coordenadas Con requests \u00b6 Normalizar una entidad \u00b6 import requests import urllib API_BASE_URL = \"https://apis.datos.gob.ar/georef/api/\" def get_similar(endpoint, nombre, **kwargs): kwargs[\"nombre\"] = nombre url = \"{}{}?{}\".format(API_BASE_URL, endpoint, urllib.urlencode(kwargs)) return requests.get(url).json()[endpoint] provincias = get_similar(\"provincias\", \"San Juan\") [{ u'centroide': { u'lat': -30.865368, u'lon': -68.889491 }, u'fuente': u'IGN', u'id': u'70', u'nombre': u'San Juan' }] Normalizar varias entidades \u00b6 def get_similar_bulk(endpoint, nombres): \"\"\"Normaliza una lista de nombres de alguna de las entidades geogr\u00e1ficas.\"\"\" # realiza consulta a la API data = { endpoint: [ {\"nombre\": nombre, \"max\": 1} for nombre in nombres ]} url = API_BASE_URL + endpoint results = requests.post( url, json=data, headers={\"Content-Type\": \"application/json\"} ).json() # convierte a una lista de \"resultado m\u00e1s probable\" o \"vac\u00edo\" cuando no hay parsed_results = [ single_result[endpoint][0] if single_result[endpoint] else {} for single_result in results[\"resultados\"] ] return parsed_results provincias = get_similar_bulk(\"provincias\", [\"pxa\", \"sant fe\"]) [ {}, { u'centroide': { u'lat': -30.706927, u'lon': -60.949837 }, u'fuente': u'IGN', u'id': u'82', u'nombre': u'Santa Fe' } ] Enriquecer coordenadas con las unidades territoriales que las contienen \u00b6 def get_territorial_units(ubicaciones): \"\"\"Pide las unidades territoriales que contienen a c/punto de una lista de coordenadas.\"\"\" # realiza consulta a la API endpoint = \"ubicacion\" data = { \"ubicaciones\": [ {\"lat\": ubicacion[\"lat\"], \"lon\": ubicacion[\"lon\"], \"aplanar\": True} for ubicacion in ubicaciones ]} url = API_BASE_URL + endpoint results = requests.post( url, json=data, headers={\"Content-Type\": \"application/json\"} ).json() # convierte a una lista de \"resultado m\u00e1s probable\" o \"vac\u00edo\" cuando no hay parsed_results = [ single_result[endpoint] if single_result[endpoint] else {} for single_result in results[\"resultados\"] ] return parsed_results ubicaciones = get_territorial_units([ {\"lat\": -32.9477132, \"lon\": -60.6304658}, {\"lat\": -34.6037389, \"lon\": -58.3815704} ]) [ { u'departamento_id': u'30105', u'departamento_nombre': u'Victoria', u'fuente': u'IGN', u'lat': -32.9477132, u'lon': -60.6304658, u'municipio_id': u'82210', u'municipio_nombre': u'Rosario', u'provincia_id': u'30', u'provincia_nombre': u'Entre R\u00edos' }, { u'departamento_id': u'02007', u'departamento_nombre': u'Comuna 1', u'fuente': u'IGN', u'lat': -34.6037389, u'lon': -58.3815704, u'municipio_id': None, u'municipio_nombre': None, u'provincia_id': u'02', u'provincia_nombre': u'Ciudad Aut\u00f3noma de Buenos Aires' } ] Con pandas \u00b6 Consultar listas de referencia \u00b6 Todas las consultas a la API en formato CSV, se pueden leer f\u00e1cilmente a un pandas.DataFrame . De ah\u00ed se pueden tomar listas de referencia para distintas unidades territoriales. import pandas as pd provincias = pd.read_csv(\"https://apis.datos.gob.ar/georef/api/provincias?formato=csv\") provincia_id provincia_nombre 14 C\u00f3rdoba 22 Chaco 26 Chubut 6 Buenos Aires 10 Catamarca 30 Entre R\u00edos 34 Formosa 42 La Pampa 62 R\u00edo Negro 70 San Juan 78 Santa Cruz 82 Santa Fe 94 Tierra del Fuego, Ant\u00e1rtida e Islas del Atl\u00e1nt... 38 Jujuy 54 Misiones 2 Ciudad Aut\u00f3noma de Buenos Aires 18 Corrientes 46 La Rioja 66 Salta 86 Santiago del Estero 50 Mendoza 58 Neuqu\u00e9n 74 San Luis 90 Tucum\u00e1n Enriquecer coordenadas \u00b6 def add_territorial_units(df, column_lat, column_lon): \"\"\"Agrega unidades territoriales que contienen coordenadas a un DataFrame. Args: df (pandas.DataFrame): Un DataFrame que tiene coordenadas. column_lat (str): Nombre de la columna que tiene latitud. column_lon (str): Nombre de la columna que tiene longitud. Returns: pandas.DataFrame: DataFrame original aumentado con unidades territoriales que contienen a las coordenadas. \"\"\" # toma una lista de coordenadas \u00fanicas (no repetidas) coordinates = df[[column_lon, column_lat]].rename( columns={column_lon: \"lon\", column_lat: \"lat\"} ).drop_duplicates().to_dict(\"records\") # crea DataFrame de unidades territoriales que contienen a las coordenadas ubicaciones = pd.DataFrame(get_territorial_units(coordinates)) # agrega las unidades territoriales al DataFrame original df_with_territorial_units = df.merge( ubicaciones, \"left\", left_on=[column_lon, column_lat], right_on=[\"lon\", \"lat\"] ) # elimina columnas de coordenadas repetidas, dejando las originales return df_with_territorial_units.drop([\"lon\", \"lat\"], axis=1) # descarga un CSV con coordenadas de aeropuertos df = pd.read_csv(\"https://servicios.transporte.gob.ar/gobierno_abierto/descargar.php?t=aeropuertos&d=detalle\", sep=\";\") # Agrega unidades territoriales que contienen coordenadas a un DataFrame df_with_territorial_units = add_territorial_units(df, \"longitud\", \"latitud\") tipo denominacion latitud longitud elev \\ Aer\u00f3dromo CORONEL BOGADO/AGROSERVICIOS -60.57066 -33.27226 44.0 Aer\u00f3dromo GENERAL ACHA -64.61351 -37.40164 277.0 Aer\u00f3dromo ARRECIFES/LA CURA MALAL -60.14170 -34.07574 37.0 Aer\u00f3dromo PUERTO DESEADO -65.90410 -47.73511 82.0 Aer\u00f3dromo BANDERA/AGROSERVICIOS DO\u00d1A TERESA -62.26462 -28.85541 75.0 departamento_id departamento_nombre municipio_id municipio_nombre \\ 82084 Rosario 823393 Coronel Bogado 42154 Utrac\u00e1n 420133 General Acha 06077 Arrecifes 060077 Arrecifes 78014 Deseado None None 86077 General Taboada None None provincia_id provincia_nombre 82 Santa Fe 42 La Pampa 06 Buenos Aires 78 Santa Cruz 86 Santiago del Estero","title":"Usar en Python"},{"location":"python_usage/#usar-en-python","text":"Con requests Normalizar una entidad Normalizar varias entidades Enriquecer coordenadas con las unidades territoriales que las contienen Con pandas Consultar listas de referencia Enriquecer coordenadas","title":"Usar en Python"},{"location":"python_usage/#con-requests","text":"","title":"Con requests"},{"location":"python_usage/#normalizar-una-entidad","text":"import requests import urllib API_BASE_URL = \"https://apis.datos.gob.ar/georef/api/\" def get_similar(endpoint, nombre, **kwargs): kwargs[\"nombre\"] = nombre url = \"{}{}?{}\".format(API_BASE_URL, endpoint, urllib.urlencode(kwargs)) return requests.get(url).json()[endpoint] provincias = get_similar(\"provincias\", \"San Juan\") [{ u'centroide': { u'lat': -30.865368, u'lon': -68.889491 }, u'fuente': u'IGN', u'id': u'70', u'nombre': u'San Juan' }]","title":"Normalizar una entidad"},{"location":"python_usage/#normalizar-varias-entidades","text":"def get_similar_bulk(endpoint, nombres): \"\"\"Normaliza una lista de nombres de alguna de las entidades geogr\u00e1ficas.\"\"\" # realiza consulta a la API data = { endpoint: [ {\"nombre\": nombre, \"max\": 1} for nombre in nombres ]} url = API_BASE_URL + endpoint results = requests.post( url, json=data, headers={\"Content-Type\": \"application/json\"} ).json() # convierte a una lista de \"resultado m\u00e1s probable\" o \"vac\u00edo\" cuando no hay parsed_results = [ single_result[endpoint][0] if single_result[endpoint] else {} for single_result in results[\"resultados\"] ] return parsed_results provincias = get_similar_bulk(\"provincias\", [\"pxa\", \"sant fe\"]) [ {}, { u'centroide': { u'lat': -30.706927, u'lon': -60.949837 }, u'fuente': u'IGN', u'id': u'82', u'nombre': u'Santa Fe' } ]","title":"Normalizar varias entidades"},{"location":"python_usage/#enriquecer-coordenadas-con-las-unidades-territoriales-que-las-contienen","text":"def get_territorial_units(ubicaciones): \"\"\"Pide las unidades territoriales que contienen a c/punto de una lista de coordenadas.\"\"\" # realiza consulta a la API endpoint = \"ubicacion\" data = { \"ubicaciones\": [ {\"lat\": ubicacion[\"lat\"], \"lon\": ubicacion[\"lon\"], \"aplanar\": True} for ubicacion in ubicaciones ]} url = API_BASE_URL + endpoint results = requests.post( url, json=data, headers={\"Content-Type\": \"application/json\"} ).json() # convierte a una lista de \"resultado m\u00e1s probable\" o \"vac\u00edo\" cuando no hay parsed_results = [ single_result[endpoint] if single_result[endpoint] else {} for single_result in results[\"resultados\"] ] return parsed_results ubicaciones = get_territorial_units([ {\"lat\": -32.9477132, \"lon\": -60.6304658}, {\"lat\": -34.6037389, \"lon\": -58.3815704} ]) [ { u'departamento_id': u'30105', u'departamento_nombre': u'Victoria', u'fuente': u'IGN', u'lat': -32.9477132, u'lon': -60.6304658, u'municipio_id': u'82210', u'municipio_nombre': u'Rosario', u'provincia_id': u'30', u'provincia_nombre': u'Entre R\u00edos' }, { u'departamento_id': u'02007', u'departamento_nombre': u'Comuna 1', u'fuente': u'IGN', u'lat': -34.6037389, u'lon': -58.3815704, u'municipio_id': None, u'municipio_nombre': None, u'provincia_id': u'02', u'provincia_nombre': u'Ciudad Aut\u00f3noma de Buenos Aires' } ]","title":"Enriquecer coordenadas con las unidades territoriales que las contienen"},{"location":"python_usage/#con-pandas","text":"","title":"Con pandas"},{"location":"python_usage/#consultar-listas-de-referencia","text":"Todas las consultas a la API en formato CSV, se pueden leer f\u00e1cilmente a un pandas.DataFrame . De ah\u00ed se pueden tomar listas de referencia para distintas unidades territoriales. import pandas as pd provincias = pd.read_csv(\"https://apis.datos.gob.ar/georef/api/provincias?formato=csv\") provincia_id provincia_nombre 14 C\u00f3rdoba 22 Chaco 26 Chubut 6 Buenos Aires 10 Catamarca 30 Entre R\u00edos 34 Formosa 42 La Pampa 62 R\u00edo Negro 70 San Juan 78 Santa Cruz 82 Santa Fe 94 Tierra del Fuego, Ant\u00e1rtida e Islas del Atl\u00e1nt... 38 Jujuy 54 Misiones 2 Ciudad Aut\u00f3noma de Buenos Aires 18 Corrientes 46 La Rioja 66 Salta 86 Santiago del Estero 50 Mendoza 58 Neuqu\u00e9n 74 San Luis 90 Tucum\u00e1n","title":"Consultar listas de referencia"},{"location":"python_usage/#enriquecer-coordenadas","text":"def add_territorial_units(df, column_lat, column_lon): \"\"\"Agrega unidades territoriales que contienen coordenadas a un DataFrame. Args: df (pandas.DataFrame): Un DataFrame que tiene coordenadas. column_lat (str): Nombre de la columna que tiene latitud. column_lon (str): Nombre de la columna que tiene longitud. Returns: pandas.DataFrame: DataFrame original aumentado con unidades territoriales que contienen a las coordenadas. \"\"\" # toma una lista de coordenadas \u00fanicas (no repetidas) coordinates = df[[column_lon, column_lat]].rename( columns={column_lon: \"lon\", column_lat: \"lat\"} ).drop_duplicates().to_dict(\"records\") # crea DataFrame de unidades territoriales que contienen a las coordenadas ubicaciones = pd.DataFrame(get_territorial_units(coordinates)) # agrega las unidades territoriales al DataFrame original df_with_territorial_units = df.merge( ubicaciones, \"left\", left_on=[column_lon, column_lat], right_on=[\"lon\", \"lat\"] ) # elimina columnas de coordenadas repetidas, dejando las originales return df_with_territorial_units.drop([\"lon\", \"lat\"], axis=1) # descarga un CSV con coordenadas de aeropuertos df = pd.read_csv(\"https://servicios.transporte.gob.ar/gobierno_abierto/descargar.php?t=aeropuertos&d=detalle\", sep=\";\") # Agrega unidades territoriales que contienen coordenadas a un DataFrame df_with_territorial_units = add_territorial_units(df, \"longitud\", \"latitud\") tipo denominacion latitud longitud elev \\ Aer\u00f3dromo CORONEL BOGADO/AGROSERVICIOS -60.57066 -33.27226 44.0 Aer\u00f3dromo GENERAL ACHA -64.61351 -37.40164 277.0 Aer\u00f3dromo ARRECIFES/LA CURA MALAL -60.14170 -34.07574 37.0 Aer\u00f3dromo PUERTO DESEADO -65.90410 -47.73511 82.0 Aer\u00f3dromo BANDERA/AGROSERVICIOS DO\u00d1A TERESA -62.26462 -28.85541 75.0 departamento_id departamento_nombre municipio_id municipio_nombre \\ 82084 Rosario 823393 Coronel Bogado 42154 Utrac\u00e1n 420133 General Acha 06077 Arrecifes 060077 Arrecifes 78014 Deseado None None 86077 General Taboada None None provincia_id provincia_nombre 82 Santa Fe 42 La Pampa 06 Buenos Aires 78 Santa Cruz 86 Santiago del Estero","title":"Enriquecer coordenadas"},{"location":"quick_start/","text":"Ejemplos de uso \u00b6 Ejemplos r\u00e1pidos B\u00fasqueda de provincias B\u00fasqueda de departamentos B\u00fasqueda de municipios B\u00fasqueda de localidades Normalizaci\u00f3n de direcciones Entidades geogr\u00e1ficas en un punto Ejemplos de operaciones por lotes B\u00fasqueda de municipios en lotes Normalizaci\u00f3n de direcciones en lotes Ejemplos r\u00e1pidos \u00b6 A continuaci\u00f3n, se muestran algunos ejemplos de uso de la API, utilizando los recursos GET : B\u00fasqueda de provincias \u00b6 GET https://apis.datos.gob.ar/georef/api/provincias?nombre=cordoba { \"provincias\": [ { \"fuente\": \"IGN\", \"id\": \"14\", \"centroide\": { \"lat\": -32.142933, \"lon\": -63.801753 }, \"nombre\": \"C\u00d3RDOBA\" } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 } B\u00fasqueda de departamentos \u00b6 GET https://apis.datos.gob.ar/georef/api/departamentos?provincia=jujuy&max=16 { \"departamentos\": [ { \"fuente\": \"IGN\", \"id\": \"38042\", \"centroide\": { \"lat\": -24.194923, \"lon\": -65.12645 }, \"nombre\": \"PALPAL\u00c1\", \"provincia\": { \"id\": \"38\", \"nombre\": \"JUJUY\" } }, { ... } // 15 departamentos omitidos ], \"cantidad\": 16, \"total\": 16, \"inicio\": 0 } B\u00fasqueda de municipios \u00b6 GET https://apis.datos.gob.ar/georef/api/municipios?departamento=graneros { \"municipios\": [ { \"centroide\": { \"lat\": -27.816619, \"lon\": -65.199594 }, \"departamento\": { \"id\": \"90035\", \"nombre\": \"Graneros\" }, \"fuente\": \"IGN\", \"id\": \"908210\", \"nombre\": \"Taco Ralo\", \"provincia\": { \"id\": \"90\", \"nombre\": \"Tucum\u00e1n\" } }, { ... } // 2 municipios omitidos ], \"cantidad\": 3, \"total\": 3, \"inicio\": 0 } B\u00fasqueda de localidades \u00b6 GET https://apis.datos.gob.ar/georef/api/localidades?provincia=chubut&campos=nombre { \"localidades\": [ { \"fuente\": \"BAHRA\", \"id\": \"26007030000\", \"nombre\": \"PUERTO PIRAMIDE\" }, { ... } // 9 resultados omitidos ], \"cantidad\": 10, \"total\": 90, \"inicio\": 0 } Normalizaci\u00f3n de direcciones \u00b6 GET https://apis.datos.gob.ar/georef/api/direcciones?provincia=bsas&direccion=Florida 1801 { \"direcciones\": [ { \"altura\": 1801, \"departamento\": { \"id\": \"06270\", \"nombre\": \"JOS\u00c9 M. EZEIZA\" }, \"fuente\": \"INDEC\", \"id\": \"0627001001875\", \"nombre\": \"FLORIDA\", \"nomenclatura\": \"FLORIDA 1801, JOS\u00c9 M. EZEIZA, BUENOS AIRES\", \"provincia\": { \"id\": \"06\", \"nombre\": \"BUENOS AIRES\" }, \"tipo\": \"CALLE\" }, { ... } // 9 resultados omitidos ], \"cantidad\": 1, \"total\": 13, \"inicio\": 0 } Normalizaci\u00f3n de direcciones \u00b6 GET https://apis.datos.gob.ar/georef/api/direcciones?provincia=bsas&direccion=Florida 1801 { \"direcciones\": [ { \"altura\": 1801, \"departamento\": { \"id\": \"06270\", \"nombre\": \"JOS\u00c9 M. EZEIZA\" }, \"fuente\": \"INDEC\", \"id\": \"0627001001875\", \"nombre\": \"FLORIDA\", \"nomenclatura\": \"FLORIDA 1801, JOS\u00c9 M. EZEIZA, BUENOS AIRES\", \"provincia\": { \"id\": \"06\", \"nombre\": \"BUENOS AIRES\" }, \"tipo\": \"CALLE\" }, { ... } // 9 resultados omitidos ], \"cantidad\": 1, \"total\": 13, \"inicio\": 0 } Listado de calles \u00b6 GET https://apis.datos.gob.ar/georef/api/calles?departamento=rio chico&tipo=avenida { \"calles\": [ { \"altura\": { \"fin\": { \"derecha\": 0, \"izquierda\": 0 }, \"inicio\": { \"derecha\": 0, \"izquierda\": 0 } }, \"departamento\": { \"id\": \"90077\", \"nombre\": \"R\u00edo Chico\" }, \"fuente\": \"INDEC\", \"id\": \"9007701000050\", \"nombre\": \"AV GRL SAVIO\", \"nomenclatura\": \"AV GRL SAVIO, R\u00edo Chico, Tucum\u00e1n\", \"provincia\": { \"id\": \"90\", \"nombre\": \"Tucum\u00e1n\" }, \"tipo\": \"AV\" }, { ... } // 2 resultados omitidos ], \"cantidad\": 3, \"total\": 3, \"inicio\": 0 } Ejemplos de operaciones por lotes \u00b6 Todos los recursos de la API tienen una variante POST , que permite realizar varias consultas en una misma petici\u00f3n. De esta forma, se pueden env\u00edar m\u00e1s consultas en menos tiempo. A diferencia de los recursos GET , los ejemplos de operaciones por lotes se muestran utilizando comandos constru\u00eddos sobre curl . B\u00fasqueda de municipios en lotes \u00b6 curl -X POST \"https://apis.datos.gob.ar/georef/api/municipios\" \\ -H 'Content-Type: application/json' -d' { \"municipios\": [ { \"nombre\": \"belgrano\", \"max\": 1, \"campos\": \"id, nombre\" }, { \"nombre\": \"martin\", \"max\": 1, \"provincia\": \"la pampa\", \"aplanar\": true } ] } ' Resultados: { \"resultados\": [ { \"municipios\": [ { \"fuente\": \"IGN\", \"id\": \"060301\", \"nombre\": \"General Belgrano\" } ], \"cantidad\": 1, \"total\": 8, \"inicio\": 0 }, { \"municipios\": [ { \"centroide_lat\": -35.361211, \"centroide_lon\": -64.294073, \"departamento_id\": \"42133\", \"departamento_nombre\": \"Realic\u00f3\", \"fuente\": \"IGN\", \"id\": \"420126\", \"nombre\": \"Embajador Martini\", \"provincia_id\": \"42\", \"provincia_nombre\": \"La Pampa\" } ], \"cantidad\": 1, \"total\": 2, \"inicio\": 0 } ] } Normalizaci\u00f3n de direcciones en lotes \u00b6 curl -X POST \"https://apis.datos.gob.ar/georef/api/direcciones\" \\ -H 'Content-Type: application/json' -d' { \"direcciones\": [ { \"direccion\": \"santa fe 3100\", \"max\": 1, \"campos\": \"id, nombre, altura\" }, { \"direccion\": \"corientes 4010\", \"max\": 1, \"campos\": \"id, nombre, altura\", \"departamento\": \"General L\u00f3pez\" } ] } ' Resultados: { \"resultados\": [ { \"direcciones\": [ { \"altura\": 3100, \"fuente\": \"INDEC\", \"id\": \"0642701011435\", \"nombre\": \"SANTA FE\" } ], \"cantidad\": 1, \"total\": 25, \"inicio\": 0 }, { \"direcciones\": [ { \"altura\": 4010, \"fuente\": \"INDEC\", \"id\": \"8204229000610\", \"nombre\": \"CORRIENTES\" } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 } ] } Entidades geogr\u00e1ficas en varios puntos \u00b6 curl -X POST \"https://apis.datos.gob.ar/georef/api/ubicacion\" \\ -H 'Content-Type: application/json' -d' { \"ubicaciones\": [ { \"lat\": -27.274161, \"lon\": -66.752929 }, { \"lat\": -31.480693, \"lon\": -59.092813, \"aplanar\": true } ] } ' Resultados: { \"resultados\": [ { \"ubicacion\": { \"fuente\": \"IGN\", \"municipio\": { \"nombre\": \"Hualf\u00edn\", \"id\": \"100077\" }, \"lon\": -66.752929, \"provincia\": { \"nombre\": \"Catamarca\", \"id\": \"10\" }, \"lat\": -27.274161, \"departamento\": { \"nombre\": \"Bel\u00e9n\", \"id\": \"10035\" } } }, { \"ubicacion\": { \"departamento_nombre\": \"Villaguay\", \"lon\": -59.092813, \"municipio_id\": null, \"lat\": -31.480693, \"fuente\": \"IGN\", \"provincia_nombre\": \"Entre R\u00edos\", \"provincia_id\": \"30\", \"departamento_id\": \"30113\", \"municipio_nombre\": null } } ] }","title":"Ejemplos de uso"},{"location":"quick_start/#ejemplos-de-uso","text":"Ejemplos r\u00e1pidos B\u00fasqueda de provincias B\u00fasqueda de departamentos B\u00fasqueda de municipios B\u00fasqueda de localidades Normalizaci\u00f3n de direcciones Entidades geogr\u00e1ficas en un punto Ejemplos de operaciones por lotes B\u00fasqueda de municipios en lotes Normalizaci\u00f3n de direcciones en lotes","title":"Ejemplos de uso"},{"location":"quick_start/#ejemplos-rapidos","text":"A continuaci\u00f3n, se muestran algunos ejemplos de uso de la API, utilizando los recursos GET :","title":"Ejemplos r\u00e1pidos"},{"location":"quick_start/#busqueda-de-provincias","text":"GET https://apis.datos.gob.ar/georef/api/provincias?nombre=cordoba { \"provincias\": [ { \"fuente\": \"IGN\", \"id\": \"14\", \"centroide\": { \"lat\": -32.142933, \"lon\": -63.801753 }, \"nombre\": \"C\u00d3RDOBA\" } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 }","title":"B\u00fasqueda de provincias"},{"location":"quick_start/#busqueda-de-departamentos","text":"GET https://apis.datos.gob.ar/georef/api/departamentos?provincia=jujuy&max=16 { \"departamentos\": [ { \"fuente\": \"IGN\", \"id\": \"38042\", \"centroide\": { \"lat\": -24.194923, \"lon\": -65.12645 }, \"nombre\": \"PALPAL\u00c1\", \"provincia\": { \"id\": \"38\", \"nombre\": \"JUJUY\" } }, { ... } // 15 departamentos omitidos ], \"cantidad\": 16, \"total\": 16, \"inicio\": 0 }","title":"B\u00fasqueda de departamentos"},{"location":"quick_start/#busqueda-de-municipios","text":"GET https://apis.datos.gob.ar/georef/api/municipios?departamento=graneros { \"municipios\": [ { \"centroide\": { \"lat\": -27.816619, \"lon\": -65.199594 }, \"departamento\": { \"id\": \"90035\", \"nombre\": \"Graneros\" }, \"fuente\": \"IGN\", \"id\": \"908210\", \"nombre\": \"Taco Ralo\", \"provincia\": { \"id\": \"90\", \"nombre\": \"Tucum\u00e1n\" } }, { ... } // 2 municipios omitidos ], \"cantidad\": 3, \"total\": 3, \"inicio\": 0 }","title":"B\u00fasqueda de municipios"},{"location":"quick_start/#busqueda-de-localidades","text":"GET https://apis.datos.gob.ar/georef/api/localidades?provincia=chubut&campos=nombre { \"localidades\": [ { \"fuente\": \"BAHRA\", \"id\": \"26007030000\", \"nombre\": \"PUERTO PIRAMIDE\" }, { ... } // 9 resultados omitidos ], \"cantidad\": 10, \"total\": 90, \"inicio\": 0 }","title":"B\u00fasqueda de localidades"},{"location":"quick_start/#normalizacion-de-direcciones","text":"GET https://apis.datos.gob.ar/georef/api/direcciones?provincia=bsas&direccion=Florida 1801 { \"direcciones\": [ { \"altura\": 1801, \"departamento\": { \"id\": \"06270\", \"nombre\": \"JOS\u00c9 M. EZEIZA\" }, \"fuente\": \"INDEC\", \"id\": \"0627001001875\", \"nombre\": \"FLORIDA\", \"nomenclatura\": \"FLORIDA 1801, JOS\u00c9 M. EZEIZA, BUENOS AIRES\", \"provincia\": { \"id\": \"06\", \"nombre\": \"BUENOS AIRES\" }, \"tipo\": \"CALLE\" }, { ... } // 9 resultados omitidos ], \"cantidad\": 1, \"total\": 13, \"inicio\": 0 }","title":"Normalizaci\u00f3n de direcciones"},{"location":"quick_start/#normalizacion-de-direcciones_1","text":"GET https://apis.datos.gob.ar/georef/api/direcciones?provincia=bsas&direccion=Florida 1801 { \"direcciones\": [ { \"altura\": 1801, \"departamento\": { \"id\": \"06270\", \"nombre\": \"JOS\u00c9 M. EZEIZA\" }, \"fuente\": \"INDEC\", \"id\": \"0627001001875\", \"nombre\": \"FLORIDA\", \"nomenclatura\": \"FLORIDA 1801, JOS\u00c9 M. EZEIZA, BUENOS AIRES\", \"provincia\": { \"id\": \"06\", \"nombre\": \"BUENOS AIRES\" }, \"tipo\": \"CALLE\" }, { ... } // 9 resultados omitidos ], \"cantidad\": 1, \"total\": 13, \"inicio\": 0 }","title":"Normalizaci\u00f3n de direcciones"},{"location":"quick_start/#listado-de-calles","text":"GET https://apis.datos.gob.ar/georef/api/calles?departamento=rio chico&tipo=avenida { \"calles\": [ { \"altura\": { \"fin\": { \"derecha\": 0, \"izquierda\": 0 }, \"inicio\": { \"derecha\": 0, \"izquierda\": 0 } }, \"departamento\": { \"id\": \"90077\", \"nombre\": \"R\u00edo Chico\" }, \"fuente\": \"INDEC\", \"id\": \"9007701000050\", \"nombre\": \"AV GRL SAVIO\", \"nomenclatura\": \"AV GRL SAVIO, R\u00edo Chico, Tucum\u00e1n\", \"provincia\": { \"id\": \"90\", \"nombre\": \"Tucum\u00e1n\" }, \"tipo\": \"AV\" }, { ... } // 2 resultados omitidos ], \"cantidad\": 3, \"total\": 3, \"inicio\": 0 }","title":"Listado de calles"},{"location":"quick_start/#ejemplos-de-operaciones-por-lotes","text":"Todos los recursos de la API tienen una variante POST , que permite realizar varias consultas en una misma petici\u00f3n. De esta forma, se pueden env\u00edar m\u00e1s consultas en menos tiempo. A diferencia de los recursos GET , los ejemplos de operaciones por lotes se muestran utilizando comandos constru\u00eddos sobre curl .","title":"Ejemplos de operaciones por lotes"},{"location":"quick_start/#busqueda-de-municipios-en-lotes","text":"curl -X POST \"https://apis.datos.gob.ar/georef/api/municipios\" \\ -H 'Content-Type: application/json' -d' { \"municipios\": [ { \"nombre\": \"belgrano\", \"max\": 1, \"campos\": \"id, nombre\" }, { \"nombre\": \"martin\", \"max\": 1, \"provincia\": \"la pampa\", \"aplanar\": true } ] } ' Resultados: { \"resultados\": [ { \"municipios\": [ { \"fuente\": \"IGN\", \"id\": \"060301\", \"nombre\": \"General Belgrano\" } ], \"cantidad\": 1, \"total\": 8, \"inicio\": 0 }, { \"municipios\": [ { \"centroide_lat\": -35.361211, \"centroide_lon\": -64.294073, \"departamento_id\": \"42133\", \"departamento_nombre\": \"Realic\u00f3\", \"fuente\": \"IGN\", \"id\": \"420126\", \"nombre\": \"Embajador Martini\", \"provincia_id\": \"42\", \"provincia_nombre\": \"La Pampa\" } ], \"cantidad\": 1, \"total\": 2, \"inicio\": 0 } ] }","title":"B\u00fasqueda de municipios en lotes"},{"location":"quick_start/#normalizacion-de-direcciones-en-lotes","text":"curl -X POST \"https://apis.datos.gob.ar/georef/api/direcciones\" \\ -H 'Content-Type: application/json' -d' { \"direcciones\": [ { \"direccion\": \"santa fe 3100\", \"max\": 1, \"campos\": \"id, nombre, altura\" }, { \"direccion\": \"corientes 4010\", \"max\": 1, \"campos\": \"id, nombre, altura\", \"departamento\": \"General L\u00f3pez\" } ] } ' Resultados: { \"resultados\": [ { \"direcciones\": [ { \"altura\": 3100, \"fuente\": \"INDEC\", \"id\": \"0642701011435\", \"nombre\": \"SANTA FE\" } ], \"cantidad\": 1, \"total\": 25, \"inicio\": 0 }, { \"direcciones\": [ { \"altura\": 4010, \"fuente\": \"INDEC\", \"id\": \"8204229000610\", \"nombre\": \"CORRIENTES\" } ], \"cantidad\": 1, \"total\": 1, \"inicio\": 0 } ] }","title":"Normalizaci\u00f3n de direcciones en lotes"},{"location":"quick_start/#entidades-geograficas-en-varios-puntos","text":"curl -X POST \"https://apis.datos.gob.ar/georef/api/ubicacion\" \\ -H 'Content-Type: application/json' -d' { \"ubicaciones\": [ { \"lat\": -27.274161, \"lon\": -66.752929 }, { \"lat\": -31.480693, \"lon\": -59.092813, \"aplanar\": true } ] } ' Resultados: { \"resultados\": [ { \"ubicacion\": { \"fuente\": \"IGN\", \"municipio\": { \"nombre\": \"Hualf\u00edn\", \"id\": \"100077\" }, \"lon\": -66.752929, \"provincia\": { \"nombre\": \"Catamarca\", \"id\": \"10\" }, \"lat\": -27.274161, \"departamento\": { \"nombre\": \"Bel\u00e9n\", \"id\": \"10035\" } } }, { \"ubicacion\": { \"departamento_nombre\": \"Villaguay\", \"lon\": -59.092813, \"municipio_id\": null, \"lat\": -31.480693, \"fuente\": \"IGN\", \"provincia_nombre\": \"Entre R\u00edos\", \"provincia_id\": \"30\", \"departamento_id\": \"30113\", \"municipio_nombre\": null } } ] }","title":"Entidades geogr\u00e1ficas en varios puntos"},{"location":"spreadsheet_integration/","text":"Integraci\u00f3n con planillas de c\u00e1lculo \u00b6 Google Drive 1. Modificar la configuraci\u00f3n regional 2. Importar listados de unidades territoriales 3. Normalizar un listado de unidades territoriales Google Drive \u00b6 1. Modificar la configuraci\u00f3n regional \u00b6 La API genera archivos CSV usando \u201c.\u201d como separador decimal. Para que Google Spreadsheet lea correctamente el archivo debe elegirse \u201cEstados Unidos\u201d o cualquier otra regi\u00f3n compatible (esto s\u00f3lo afecta a la lectura de coordenadas). 2. Importar listados de unidades territoriales \u00b6 Utilizamos la funci\u00f3n IMPORTDATA() de Google Sheets y armamos la url de la entidad territorial que queremos importar. Por ejemplo \"localidades de la provincia de Santa F\u00e9\": https://apis.datos.gob.ar/georef/api/localidades?formato=csv&max=1000&provincia=santa%20fe y obtendremos: 3. Normalizar un listado de unidades territoriales \u00b6 Si tenemos un listado de provincias que queremos normalizar, como el siguiente: Podemos armar urls individuales para normalizar los nombres y traer alguno de sus atributos. Imaginemos que queremos el ID y el nombre normalizado. Primero generamos la url para cada una de las provincias: y luego necesitamos importar una nueva funci\u00f3n en la hoja de c\u00e1lculo. Para eso, desde el men\u00fa: Herramientas \u2192 Editor de secuencia de comandos. Borramos todo lo que hay en el editor y pegamos el siguiente script de Bradjasper . Renombremos el script como ImportJson.gs y guardamos. Ahora ya podemos usar la funci\u00f3n =importJSON() en una celda. =ImportJSON(B2;\u201d/provincias/id,/provincias/nombre\u201d;\u201dnoInherit,noTruncate,noHeaders\u201d) y obtendremos:","title":"Usar en planillas de c\u00e1lculo"},{"location":"spreadsheet_integration/#integracion-con-planillas-de-calculo","text":"Google Drive 1. Modificar la configuraci\u00f3n regional 2. Importar listados de unidades territoriales 3. Normalizar un listado de unidades territoriales","title":"Integraci\u00f3n con planillas de c\u00e1lculo"},{"location":"spreadsheet_integration/#google-drive","text":"","title":"Google Drive"},{"location":"spreadsheet_integration/#1-modificar-la-configuracion-regional","text":"La API genera archivos CSV usando \u201c.\u201d como separador decimal. Para que Google Spreadsheet lea correctamente el archivo debe elegirse \u201cEstados Unidos\u201d o cualquier otra regi\u00f3n compatible (esto s\u00f3lo afecta a la lectura de coordenadas).","title":"1. Modificar la configuraci\u00f3n regional"},{"location":"spreadsheet_integration/#2-importar-listados-de-unidades-territoriales","text":"Utilizamos la funci\u00f3n IMPORTDATA() de Google Sheets y armamos la url de la entidad territorial que queremos importar. Por ejemplo \"localidades de la provincia de Santa F\u00e9\": https://apis.datos.gob.ar/georef/api/localidades?formato=csv&max=1000&provincia=santa%20fe y obtendremos:","title":"2. Importar listados de unidades territoriales"},{"location":"spreadsheet_integration/#3-normalizar-un-listado-de-unidades-territoriales","text":"Si tenemos un listado de provincias que queremos normalizar, como el siguiente: Podemos armar urls individuales para normalizar los nombres y traer alguno de sus atributos. Imaginemos que queremos el ID y el nombre normalizado. Primero generamos la url para cada una de las provincias: y luego necesitamos importar una nueva funci\u00f3n en la hoja de c\u00e1lculo. Para eso, desde el men\u00fa: Herramientas \u2192 Editor de secuencia de comandos. Borramos todo lo que hay en el editor y pegamos el siguiente script de Bradjasper . Renombremos el script como ImportJson.gs y guardamos. Ahora ya podemos usar la funci\u00f3n =importJSON() en una celda. =ImportJSON(B2;\u201d/provincias/id,/provincias/nombre\u201d;\u201dnoInherit,noTruncate,noHeaders\u201d) y obtendremos:","title":"3. Normalizar un listado de unidades territoriales"}]}